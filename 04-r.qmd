---
toc-title: "Contenidos"
bibliography: bibliografia/referencias.bib
csl: bibliografia/apa-6th-edition.csl
---

# R

## Resumen
R es un lenguaje de programación enfocado en análisis estadístico. En este capítulo, se explica la sintaxis básica del lenguaje y como bloques de código en R, y sus salidas, pueden ser incluídos en documentos Quarto.

## Trabajo previo

### Instalación de software
Para la edición de código en R, se recomienda instalar:

- [Sistema base del lenguaje R](https://cloud.r-project.org/)
- [RStudio Desktop](https://posit.co/download/rstudio-desktop/) (la versión v2022.07 y superiores son las cuales cuentan con los componentes necesarios para trabajar con Quarto)

Si se va a trabajar con datos geoespaciales, es conveniente contar con un sistema de información geográfica de escritorio, como [QGIS](https://qgis.org/).

## El lenguaje de programación R
[R](https://www.r-project.org/) es un lenguaje de programación enfocado en análisis estadístico. Es ampliamente utilizado en diversas áreas de investigación, entre las que pueden mencionarse [ciencia de datos (*data science*)](https://en.wikipedia.org/wiki/Data_science), [*big data*](https://en.wikipedia.org/wiki/Big_data) y [aprendizaje automático (*machine learning*)](https://en.wikipedia.org/wiki/Machine_learning). Fue creado por Ross Ihaka y Robert Gentleman en la Universidad de Auckland, Nueva Zelanda, en 1993.

R es un proyecto de [software libre](https://en.wikipedia.org/wiki/Free_software) que se comparte mediante una licencia [GNU General Public Licence (GNU GPL)](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html). Esta característica permite que la funcionalidad original de R pueda ser ampliada mediante bibliotecas o paquetes desarrollados por la comunidad de programadores.

Para programar en R, puede utilizarse una interfaz de línea de comandos, editores de texto (ej. [Visual Studio Code](https://code.visualstudio.com/), [Vim](https://www.vim.org/)) y también ambientes de desarrollo integrados (IDE, *integrated development environment*) como [Jupyter](https://jupyter.org/) o [RStudio](https://rstudio.com/).

### Tipos de datos y variables
R puede trabajar con varios tipos de datos como números, textos y expresiones lógicas. También con datos agrupados en estructuras similares a tablas.

En la memoria de una computadora, los datos se almacenan en variables. Una variable puede considerarse como una etiqueta que se le asigna a un dato. Hay muchas formas de crear variables en R. Una de las más sencillas es con los operadores de asignación: `=`, `<-` y `->`. Por ejemplo:

```{r}
#| label: code-asignacion
#| collapse: true

# Creación de una variable numérica con valor inicial igual a 10
x <- 10
```

#### Tipos básicos
Los [tipos de datos básicos](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Basic-types) incluyen números, caracteres (i.e. textos), expresiones lógicas, vectores y matrices. Las siguientes sentencias crean variables de varios tipos de datos simples.

```{r}
#| label: code-asignacion-simples
#| collapse: true

# Números (pueden ser enteros o decimales)
x <- 10
x

# Hileras de caracteres (se delimitan entre comillas simples o dobles)
nombre <- 'Manuel'
nombre

# Lógicos (Verdadero o Falso, TRUE o FALSE)
p <- 1 > 2
p

# Vectores (pueden contener elementos de cualquier tipo de datos)
dias <- c('Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado')
dias
```

#### Tipos compuestos
Los [tipos de datos compuestos](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Special-compound-objects) se utilizan para implementar conjuntos de datos, los cuales incluyen varios tipos de datos simples. Entre los tipos de datos compuestos, se encuentran los factores y los data frames.

##### Data frames
Los [data frames](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Data-frame-objects) son fundamentales para el análisis de datos en R. Son estructuras bidimensionales similares a tablas. Sus filas corresponden a las [observaciones](https://es.wikipedia.org/wiki/Observaci%C3%B3n) de un conjunto de datos y sus columnas a las [variables](https://es.wikipedia.org/wiki/Variable_estad%C3%ADstica). Los data frames implementan un conjunto de funciones similares a las de una hoja electrónica o una tabla de una base de datos relacional.

La distribución base de R incluye varios data frames de ejemplo.

```{r}
#| label: code-data
#| eval: false

# Información sobre todos los conjuntos de datos incorporados en la distribución base de R
data()

# Información sobre el cojunto de datos cars
?cars
# Despliegue de los datos de cars
View(cars)

# Información sobre el cojunto de datos mtcars
?mtcars
# Despliegue de los datos de mtcars
View(mtcars)

# Información sobre el cojunto de datos iris
?iris
# Despliegue de los datos de iris
View(iris)
```

R cuenta con una gran cantidad de funciones y operadores para manipular data frames. La notación `[fila, columna]` se utiliza para acceder a los elementos de un data frame.

```{r}
#| label: dataframes
#| collapse: false

# Valor de la fila 1 y columna 1 del conjunto de datos iris
iris[1, 1]

# Fila 1 y columna 4
iris[1, 5]

# Fila 2 (todas las columnas)
iris[1, ]

# Fila 2, columnas 3 y 4
iris[1, c(3, 4)]

# Columna 1 (todas las filas)
iris[, 5]
```

El símbolo `$` se emplea para referirse a una columna (i.e. variable) de un data frame, por su nombre (y no por su índice). También facilita algunas operaciones, como filtrado.

```{r}
#| label: dataframes-dollar
#| collapse: false

# Columna Species
iris$Species

# Creación de un subconjunto con las filas de la especie setosa
# y con longitud del sépalo mayor o igual a 5.5
setosa <- iris[iris$Species == "setosa" & iris$Sepal.Length >= 5.5, ]
setosa
```

La función [read.csv()](https://rdrr.io/r/utils/read.table.html) permite leer datos de un archivo de valores separados por comas (CSV), el cual puede estar en una ubicación local o remota, y almacenarlos como un data frame.

```{r}
#| label: code-readcsv
#| collapse: true
#| eval: false

# Lectura de archivo CSV ubicado en la Web
especies_mamiferos_cr <-
  read.csv(
    "https://raw.githubusercontent.com/mesa-monitoreo-puntos/capacitacion/main/datos/especies-mamiferos-cr.csv"
  )

# Desplegue de los datos
View(especies_mamiferos_cr)
```

**Ejercicio**  
- Descargue en su computadora el archivo [https://raw.githubusercontent.com/mesa-monitoreo-puntos/capacitacion/main/datos/registros-mamiferos-cr.csv](https://raw.githubusercontent.com/mesa-monitoreo-puntos/capacitacion/main/datos/registros-mamiferos-cr.csv), cárguelo en un data frame y despliegue sus datos.

### Funciones
R estructura un programa en unidades de [código fuente](https://en.wikipedia.org/wiki/Source_code) llamadas [funciones](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Functions). Cada función realiza una tarea específica como, por ejemplo, un cálculo matemático y, por lo general, retorna un valor como salida. Todas las funciones tienen un nombre y, opcionalmente, un conjunto de argumentos que especifican los datos de entrada que procesa la función. Los argumentos se escriben entre paréntesis redondos (`()`) y estos siempre deben incluirse, aún en el caso de que la función no tenga ningún argumento. Si la función tiene varios argumentos, deben separarse mediante comas (`,`).

```{r}
#| label: code-functions-examples

# Impresión de una hilera de caracteres
print("Hola mundo")


# Cálculo de la media aritmética
mean(c(2, 4, 5, 9))
```

### Paquetes
Las funciones de R se distribuyen en [paquetes](https://en.wikipedia.org/wiki/R_package). Cada paquete contiene un conjunto de funciones y estructuras de datos relacionadas entre sí. También hay paquetes que contienen datos (ej. [gapminder](https://cran.r-project.org/web/packages/gapminder/)).

Para utilizar un paquete, primero debe cargarse (en la memoria del computador) con la función [library()](https://rdrr.io/r/base/library.html).

```{r}
#| label: code-library

# Carga del paquete stats (para estadística)
library(stats)
```

Algunos paquetes están contenidos en la distribución base de R. Otros deben instalarse con la función [install.packages()](https://rdrr.io/r/utils/install.packages.html).

En el siguiente bloque de código, se instala el paquete [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/).

```{r}
#| label: code-install.packages
#| eval: false

# Instalación del paquete palmerpenguins (note las comillas)
install.packages("palmerpenguins")

# Carga del paquete palmerpenguins
library(palmerpenguins)
```

## Tidyverse

### Descripción general
[Tidyverse](https://www.tidyverse.org/) es una colección de paquetes de R enfocados en [ciencia de datos](https://es.wikipedia.org/wiki/Ciencia_de_datos), una discipina que permite convertir datos no procesados en entendimiento, comprensión y conocimiento.

La @fig-modelo-ciencia-datos ilustra el modelo de un proyecto típico de ciencia de datos, el cual incluye los procesos de importar, organizar, transformar, visualizar, modelar y comunicar.

```{r}
#| label: fig-modelo-ciencia-datos
#| fig.cap: Modelo de ciencia de datos. Imagen de [Hadley Wickham](https://r4ds.had.co.nz/introduction.html).
#| echo: false

knitr::include_graphics(rep("img/modelo-ciencia-datos.png"))
```

### Paquetes
Los paquetes de Tidyverse comparten filosofía de diseño, gramática y estructuras de datos para apoyar estos procesos del modelo de ciencia de datos. El núcleo de Tidyverse está compuesto por [ocho paquetes base](https://www.tidyverse.org/packages/#core-tidyverse), los cuales proveen las funcionalidades utilizadas más frecuentemente en análisis de datos:

- [ggplot2](https://ggplot2.tidyverse.org/): sistema para la creación declarativa de gráficos, basado en el libro [*The Grammar of Graphics*, de Wilkinson et al.](https://www.springer.com/gp/book/9780387245447).
- [dplyr](https://dplyr.tidyverse.org/): gramática para la manipulación de datos que proporciona un conjunto consistente de "verbos" que resulven los retos más comunes de manipulación de datos.
- [tidyr](https://tidyr.tidyverse.org/): conjunto de funciones para organizar (*to tidy*) datos, colocando las observaciones, variables y valores en filas, columnas y celdas de estructuras rectangulares.
- [readr](https://readr.tidyverse.org/): conjunto de funciones para cargar datos de estructuras rectangulares (ej. archivos CSV) en memoria.
- [purr](https://purrr.tidyverse.org/): conjunto de herramientas de [programación funcional](https://es.wikipedia.org/wiki/Programaci%C3%B3n_funcional) para trabajar con funciones y vectores.
- [tibble](https://tibble.tidyverse.org/): un *tibble* es una redefinición del concepto de data frame, para hacerlos más eficientes y fáciles de usar.
- [stringr](https://stringr.tidyverse.org/): colección de funciones para facilitar el trabajo con hileras de caracteres.
- [forcats](https://forcats.tidyverse.org/): colección de funciones para facilitar el trabajo con factores.

Hay [otros paquetes](https://www.tidyverse.org/packages/) para tareas más especifícas relacionadas con importación, limpieza y modelado de datos, entre otras. Los paquetes de Tidyverse son de los [más descargados](https://www.r-pkg.org/downloaded), entre la totalidad de paquetes del lenguaje de programación R.

### Instalación y carga
Los paquetes de Tidyverse pueden instalarse de manera conjunta o individualmente con la función `install.packages()`:

```{r}
#| label: instalacion-tidyverse
#| eval: false

# Instalación conjunta
install.packages("tidyverse")

# Instalación de paquetes individuales
install.packages("ggplot2")
install.packages("dplyr")
```

Una vez instalados, los paquetes también pueden cargarse conjunta o separadamente con la función `library()`:

```{r}
#| label: carga-tidyverse
#| message: false

# Carga conjunta
library(tidyverse)

# Carga de paquetes individuales
library(ggplot2)
library(dplyr)
```

### Datos *tidy*
Los paquetes de Tidyverse trabajan con [datos *tidy*](https://www.jstatsoft.org/article/view/v059i10) (i.e. ordenados, organizados), un concepto relacionado con la organización de los datos en estructuras rectangulares de filas y columnas, similares a las tablas o matrices.

Los datos *tidy* deben cumplir con tres características:

1.  Cada variable debe tener su propia columna.
2.  Cada observación debe tener su propia fila.
3.  Cada valor debe tener su propia celda.

Estas características se ilustran en la @fig-datos-tidy.

```{r}
#| label: fig-datos-tidy
#| fig.cap: Datos *tidy*. Imagen de [Hadley Wickham](https://r4ds.had.co.nz/tidy-data.html).
#| echo: false

knitr::include_graphics(rep("img/datos-tidy.png"))
```

El empleo de este modelo de datos es común en todos los paquetes de Tidyverse, lo que posibilita aprender y usar sus funciones con mayor facilidad. Además, permite invertir menos esfuerzo en lidiar con diferentes modelos de datos y así dedicar más tiempo y esfuerzo en los problemas de análisis a resolver.

### *Pipes*
Las funciones de Tidyverse pueden encadenarse a través del operador *pipe* (tubo), ya sea el del paquete magrittr [(%\>%)](https://magrittr.tidyverse.org/reference/pipe.html) o el del paquete base de R [(\|\>)](https://michaelbarrowman.co.uk/post/the-new-base-pipe/). Los *pipes* se utilizan para conectar procesos y así construir *pipelines* (tuberías). En este contexto, un *pipeline* consiste de una cadena de procesos conectados de forma tal que la salida de cada proceso de la cadena es la entrada del próximo. Esto permite la comunicación y sincronización entre los procesos y evita la anidación (*nesting*) de llamados a funciones.

El siguiente ejemplo implementa un *pipeline* de dos funciones de Tidyverse:

```{r}
#| label: ejemplo-pipes
#| eval: false

# Cadena de "pipes" entre funciones de Tidyverse
penguins |>
  dplyr::filter(species == "Gentoo") |> # subconjunto de observaciones
  select(species, bill_length_mm, flipper_length_mm) # subconjunto de columnas
```

## Ejemplos de visualizaciones de datos
Se presentan ejemplos de visualizaciones generadas con R en formato de tablas, gráficos y mapas.

Se cargan los paquetes `dplyr`, para manipulación de datos, y `palmerpenguins` como conjunto de datos de ejemplo.

```{r}
#| label: cargar-paquetes
#| message: false

# Carga de dplyr
library(dplyr)

# Carga de palmerpenguins
library(palmerpenguins)
```

### El conjunto de datos palmerpenguins
[palmerpenguins](https://allisonhorst.github.io/palmerpenguins/) es un [paquete de datos de R](https://cloud.r-project.org/web/packages/palmerpenguins/) ampliamente utilizado para ejemplificar funciones de exploración y visualización, como las de Tidyverse. Contiene 344 observaciones de pingüinos de tres especies, las cuales habitan en tres islas del archipiélago Palmer, en la Antártida. Para cada individuo se registraron variables como especie, sexo, masa (peso), longitud de la aleta (*flipper*), longitud del pico (*bill*) y profundidad del pico, entre otras.

`palmerpenguins` puede instalarse con la función `install.packages()` y cargarse con la función `library()`.

El paquete contiene dos conjuntos de datos:

-   [penguins_raw](https://allisonhorst.github.io/palmerpenguins/reference/penguins_raw.html): datos sin procesar.
-   [penguins](https://allisonhorst.github.io/palmerpenguins/reference/penguins.html): subconjunto curado de los datos sin procesar.

`palmerpinguins` se utiliza en este capítulo para ejemplificar varias de las funcionalidades de Tidyverse.

### Tablas
Hay varios paquetes de R para hacer tablas. Uno de estos es el paquete [DT](https://rstudio.github.io/DT/).

```{r}
#| label: instalacion-dt
#| eval: false

# Instalación de DT
install.packages("DT")
```

```{r}
#| label: carga-dt
#| message: false

# Carga de DT
library(DT)
```

La siguiente tabla muestra algunas de las columnas del conjunto de datos `palmerpenguins`. Note el uso del operador *pipe* (`|>`) para pasar datos entre procesos.

```{r}
#| label: penguins-table

penguins |> # datos
  select(species, sex, body_mass_g) |> # selección de columnas
  arrange(species, sex, body_mass_g) |> # ordenamiento
  datatable(
    colnames = c("Especie", "Sexo", "Peso"),
    options = list(
      pageLength = 5,
      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
    ),
    rownames= FALSE
  )
```

Hay paquetes más elaborados para la generación de tablas en R (ej. [gt](https://gt.rstudio.com/)).

**Ejercicios**  
- Con base en el bloque de código anterior, genere con `DT` una tabla que muestre la especie, la longitud del pico y la longitud de la aleta de cada pingüino, ordenada por longitud del pico.
- Repita el ejercicio anterior, solo para los pingüinos machos. (Sugerencia: use la función `filter()` de `dplyr`).

### Gráficos
[ggplot2](https://ggplot2.tidyverse.org/) es un sistema para la creación declarativa de gráficos, creado por Hadley Wickham en 2005. Está basado en el libro [*The Grammar of Graphics*, de Leland Wilkinson](https://www.springer.com/gp/book/9780387245447), un esquema general para visualización de datos que descompone un gráfico en sus principales componentes semáticos, tales como capas y geometrías.

De acuerdo con *The Grammar of Graphics*, los tres principales componentes de un gráfico son:

1.  Datos (observaciones y variables).
2.  Conjunto de mapeos de las variables del conjunto de datos a propiedades visuales (*aesthetics*) del gráfico, tales como posición en el eje x, posición en el eje y, color, tamaño y forma, entre otras.
3.  Al menos una capa, la cual describe como graficar cada observación. Por lo general, las capas se crean con funciones de geometrías (ej. puntos, líneas, barras).

Seguidamente, se ejemplifican varios tipos de gráficos `estadísticos` generados con la función 'ggplot()' del paquete `ggplot2` de Tidyverse, para el conjunto de datos `palmerpenguins`.

```{r}
#| label: instalacion-ggplot2
#| eval: false

# Instalación de ggplot2
install.packages("ggplot2")
```

```{r}
#| label: carga-ggplot2
#| message: false

# Carga de ggplot2
library(ggplot2)
```

#### Gráficos de dispersión (*scatter plots*)
Este tipo de gráficos muestra relaciones entre variables numéricas.

```{r}
#| label: ejemplo-palmerpenguins-01
#| warning: false

# Gráfico de dispersión de longitud del pico vs masa (peso)
penguins |> # datos
  ggplot(aes(x = bill_length_mm, y = body_mass_g)) + # mapeo de variables estéticas
  geom_point(size = 2) + # geometría
  geom_smooth(method = "lm", se = FALSE) +
  ggtitle("Longitud del pico vs. masa") +
  xlab("Longitud del pico (mm)") +
  ylab("Masa (g)") +
  labs(color = "Especie", shape = "Especie")
```

```{r ejemplo-palmerpenguins-02}
#| label: ejemplo-palmerpenguins-02
#| warning: false

# Gráfico de dispersión de longitud del pico vs masa (peso) por especie
penguins |>
  ggplot(aes(x = bill_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species,
                 shape = species),
             size = 2) +
  geom_smooth(method = "lm", se = FALSE, aes(color = species)) +
  scale_color_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  ggtitle("Longitud del pico vs. masa por especie") +
  xlab("Longitud del pico (mm)") +
  ylab("Masa (g)") +
  labs(color = "Especie", shape = "Especie")
```

**Ejercicios**  
- Genere un gráfico de dispersión que muestre la relación entre la longitud de la aleta y el peso de todos los pingüinos del conjunto de datos.
- Repita el ejercicio anterior, pero agrúpelo por sexo.

#### Histogramas
Este tipo de gráficos muestra distribuciones de variables numéricas.

```{r ejemplo-palmerpenguins-03}
#| label: ejemplo-palmerpenguins-03
#| warning: false
#| message: false

# Distribución de la variable de masa (peso)
penguins |>
  ggplot(aes(x = body_mass_g)) +
  geom_histogram() +
  ggtitle("Distribución de la variable masa (peso)") +
  xlab("Masa (g)") +
  ylab("n")
```

```{r ejemplo-palmerpenguins-04}
#| label: ejemplo-palmerpenguins-04
#| warning: false
#| message: false

# Distribución de la variable de masa (peso) por especie
penguins |>
  ggplot(aes(x = body_mass_g)) +
  geom_histogram(aes(fill = species), alpha = 0.5, position = "identity") +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  ggtitle("Distribución de la variable masa (peso) por especie") +
  xlab("Masa (g)") +
  ylab("n") +
  labs(fill = "Especie")
```

**Ejercicios**  
- Genere un histograma que muestre la distribución de la longitud del pico para todos los pingüinos del conjunto de datos.
- Repita el ejercicio anterior, pero agrúpelo por sexo.

#### Diagramas de caja
Este tipo de gráficos muestra información de una variable numérica a través de su mediana, sus cuartiles y sus valores atípicos.

```{r}
#| label: ejemplo-palmerpenguins-05
#| warning: false

# Diagrama de caja de la variable masa (peso)
penguins |>
  ggplot(aes(y = body_mass_g)) +
  geom_boxplot() +
  ylab("Masa (g)")
```

```{r}
#| label: ejemplo-palmerpenguins-06
#| warning: false

# Diagrama de caja de la variable masa (peso) por especie
penguins |>
  ggplot(aes(x = species, y = body_mass_g)) +
  geom_boxplot(aes(color = species), width = 0.3, show.legend = FALSE) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  xlab("Especie") +
  ylab("Masa (g)")
```

### Mapas
Hay varios paquetes de R para datos geoespaciales. Entre estos, están [sf](https://r-spatial.github.io/sf/), para manejar datos vectoriales, y [leaflet](https://rstudio.github.io/leaflet/), para generar mapas para la Web.

```{r}
#| label: instalacion-sf-leaflet
#| eval: false

# Instalación de sf
install.packages("sf")

# Instalación de leaflet
install.packages("leaflet")
```

```{r}
#| label: carga-sf-leaflet
#| message: false

# Carga de sf
library(sf)

# Carga de leaflet
library(leaflet)
```

El siguiente mapa muestra los registros de presencia en Costa Rica de la especie *Puma concolor*.

```{r}
#| label: st_read-texto

# Lectura de un archivo CSV con registros de presencia
registros <-
  st_read(
    "https://raw.githubusercontent.com/mesa-monitoreo-puntos/capacitacion/main/datos/registros-mamiferos-cr.csv",
    options = c(
      "X_POSSIBLE_NAMES=decimalLongitude", # columna de longitud decimal
      "Y_POSSIBLE_NAMES=decimalLatitude"   # columna de latitud decimal
    ),
    quiet = TRUE
  )

# Filtro por especie
registros <-
  registros |>
  filter(species == "Puma concolor")

# Mapa
leaflet() |>
  setView(# centro y nivel inicial de acercamiento
    lng = -84.19452,
    lat = 9.572735,
    zoom = 7) |>
  addTiles(group = "OpenStreetMap") |> # capa base de OSM |>
  addCircleMarkers(
    # capa de registros de presencia (puntos)
    data = registros,
    stroke = F,
    radius = 4,
    fillColor = 'blue',
    fillOpacity = 1,
    group = "Puma concolor",
    popup = paste(
      paste0("<strong>Especie: </strong>", registros$species),
      paste0("<strong>Localidad: </strong>", registros$locality),
      paste0("<strong>Fuente: </strong>", registros$institutionCode),
      sep = '<br/>'
    )
  ) |>
  addLayersControl(
    baseGroups = c("OpenStreetMap"),
    overlayGroups = c("Puma concolor")) |> # control de capas
  addScaleBar(position = "bottomleft", options = scaleBarOptions(imperial = FALSE)) |> # barra de escala
  addMiniMap(position = "bottomleft") # mapa de ubicación
```

## Integración de código R en documentos Quarto
En Quarto, los bloques (*chunks*) de código fuente se delimitan con tres [*backticks*](https://en.wikipedia.org/wiki/Backtick), tanto al inicio como al final del bloque. Los bloques en R se identifican con `{r}` y se configuran con diferentes opciones que inician con `#|`. Los bloques de otros lenguajes de programación se identifican con `{python}` y `{julia}`, por ejemplo.

El siguiente es un bloque de código en R y su salida.

```` md
```{r}`r ''`
#| label: graficacion-cars
#| include: true
#| echo: true

plot(
  x = cars$speed,
  y = cars$dist,
  main = "Velocidad vs distancia de frenado",
  xlab = "Velocidad (mph)",
  ylab = "Distancia (pies)"
)
```
````

```{r}
#| label: graficacion-cars
#| include: true
#| echo: false

plot(
  x = cars$speed,
  y = cars$dist,
  main = "Velocidad vs distancia de frenado",
  xlab = "Velocidad (mph)",
  ylab = "Distancia (pies)"
)
```

La opción `label` se utiliza para etiquetar el bloque. La de `include` para especificar si se desea que el bloque y sus resultados se incluyan en el documento de salida. Por su parte, `echo` indica si el código fuente debe desplegarse o no.


## Ejercicios
1. Desarrolle un documento Quarto con datos de una familia de mamíferos de Costa Rica. Incluya:

- Una tabla con registros de presencia.
- Un gráfico con cantidades de registros por especie.
- Un mapa de distribución.

2. Publique el documento como un sitio en GitHub Pages.