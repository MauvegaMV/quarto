[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Desarrollo de capacidades",
    "section": "",
    "text": "Bienvenida\nEste sitio contiene un conjunto de temas de capacitación que son de interés para la Mesa de Monitoreo por Puntos del Sistema Nacional de Monitoreo de Cobertura y Uso de la Tierra y Ecosistemas (SIMOCUTE).\n\nMarkdown: lenguaje de marcado ligero para comunicación técnica y científica.\nGit: sistema para control de versiones.\nQuarto: sistema de publicación de documentos técnicos y científicos."
  },
  {
    "objectID": "01-markdown.html#resumen",
    "href": "01-markdown.html#resumen",
    "title": "1  Markdown",
    "section": "1.1 Resumen",
    "text": "1.1 Resumen\nMarkdown es un lenguaje de marcado ligero ampliamente utilizado en comunicación científica, documentación de programas e investigación reproducible, entre otras aplicaciones. Incluye marcas para especificar aspectos de estructura, semántica y estilo de un documento. Se basa en texto simple y se convierte fácilmente a HTML, el lenguaje de marcado más utilizado en páginas web.\nMarkdown puede emplearse junto con lenguajes de programación (ej. R, Python) para así combinar texto con código fuente, el cual inserta en los documentos salidas como tablas, gráficos y mapas, entre otras. Esta forma de trabajo facilita la automatización y la reproducibilidad de una investigación.\nEn este capítulo, se explican los principales elementos de la sintaxis de Markdown y como utilizarlos en la creación de documentos."
  },
  {
    "objectID": "01-markdown.html#trabajo-previo",
    "href": "01-markdown.html#trabajo-previo",
    "title": "1  Markdown",
    "section": "1.2 Trabajo previo",
    "text": "1.2 Trabajo previo\n\n1.2.1 Instalación de software\nPara la edición de código Markdown, en el contexto de la programación en R, se recomienda instalar:\n\nSistema base del lenguaje R (no es necesario para este capítulo, pero sí se utilizará más adelante)\nRStudio Desktop\n\nOpcionalmente, puede instalar Visual Studio Code u otro editor de código fuente.\n\n\n1.2.2 Tutoriales\n\nMarkdown Tutorial"
  },
  {
    "objectID": "01-markdown.html#descripción-general",
    "href": "01-markdown.html#descripción-general",
    "title": "1  Markdown",
    "section": "1.3 Descripción general",
    "text": "1.3 Descripción general\nMarkdown es un lenguaje de marcado, creado en 2004 por John Gruber y Aaron Swartz. Las “marcas” se utilizan para especificar aspectos de la estructura (ej. títulos, encabezados), estilo (ej. negritas, itálicas) y semántica de un documento. Markdown se caracteriza por ser más sencillo de leer y de usar que otros lenguajes de marcado (ej. Lenguaje de Marcado de Hipertexto o HTML), por lo que se considera un lenguaje de marcado ligero.\nLos documentos escritos en Markdown pueden exportarse a una gran variedad de formatos (ej. HTML, DOC, PDF, LaTex) para ser usados en libros, presentaciones o páginas web, entre otros fines.\n\n1.3.1 Variaciones\nLas variaciones de Markdown, también llamadas flavors, son extensiones o modificaciones de la especificación original. Entre las más populares están:\n\nR Markdown: para el lenguaje R.\nQuarto: es la “siguiente generación” de R Markdown, con soporte para más lenguajes de programación (Python, Julia, Observable, R) y motores de procesamiento (Jupyter, Knitr), entre otras mejoras.\nPython Markdown: para el lenguaje Python.\nGitHub Flavored Markdown: para la plataforma GitHub.\nPandoc’s Markdown: para el programa Pandoc de conversión entre formatos.\nKramdown: para el lenguaje Ruby.\n\nPuede encontrarse una lista más extensa de variaciones de Markdown en Markdown Flavors."
  },
  {
    "objectID": "01-markdown.html#ejemplo-de-documento",
    "href": "01-markdown.html#ejemplo-de-documento",
    "title": "1  Markdown",
    "section": "1.4 Ejemplo de documento",
    "text": "1.4 Ejemplo de documento\nEl siguiente es un ejemplo de la sintaxis de Markdown, con marcas para un encabezado, texto en negrita, texto en itálica, un hipervínculo y una imagen.\n\n### Los satélites galileanos\n\nSe llaman **satélites galileanos** los cuatro satélites\nde Júpiter descubiertos en 1610 por \n[Galileo Galilei](https://es.wikipedia.org/wiki/Galileo_Galilei): \n*Ío*, *Europa*, *Ganimedes* y *Calisto*. \nSon los más grandes de los satélites de Júpiter, \nsiendo visibles incluso con telescopios de baja potencia.\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Jupiter_and_the_Galilean_Satellites.jpg/168px-Jupiter_and_the_Galilean_Satellites.jpg)\n\n**Figura 1**. Los cuatro satélites galileanos, \nen una composición que compara sus tamaños con el tamaño de Júpiter. \nEn orden descendente, son *Ío*, *Europa*, *Ganimedes* y *Calisto*.\n\nY la siguiente es la manera en la que se visualiza el documento:\n\n\nLos satélites galileanos\nSe llaman satélites galileanos los cuatro satélites de Júpiter descubiertos en 1610 por Galileo Galilei: Ío, Europa, Ganimedes y Calisto. Son los más grandes de los satélites de Júpiter, siendo visibles incluso con telescopios de baja potencia.\n\nFigura 1. Los cuatro satélites galileanos, en una composición que compara sus tamaños con el tamaño de Júpiter. En orden descendente, son Ío, Europa, Ganimedes y Calisto.\n\nEl contenido de este ejemplo fue tomado de Satélite galileano - Wikipedia, la enciclopedia libre."
  },
  {
    "objectID": "01-markdown.html#herramientas-para-escritura-de-documentos",
    "href": "01-markdown.html#herramientas-para-escritura-de-documentos",
    "title": "1  Markdown",
    "section": "1.5 Herramientas para escritura de documentos",
    "text": "1.5 Herramientas para escritura de documentos\nMarkdown se escribe en “texto simple o plano” (i.e. texto sin formato, compuesto únicamente por caracteres que son legibles por humanos), por lo que puede escribirse con cualquier editor de texto. Se recomienda el uso de editores orientados a programación, también llamados editores de código fuente, los cuales proporcionan facilidades para el programador, como coloración de palabras clave, sangrado y autocompletado, entre otras.\nTambién pueden utilizarse Entornos Integrados de Desarrollo o IDE, los cuales son aplicaciones informáticas que proporcionan servicios integrales para facilitarle al programador el desarrollo de software. Además de un editor de código fuente, un IDE incluye funciones para depuración (i.e. identificación de errores), interpretación y compilación de programas, entre otras.\nAlgunos de los editores de código fuente o IDE recomendados para Markdown son:\n\nVisual Studio Code: editor de código fuente muy popular y de código abierto. Puede editar código de múltiples lenguajes de programación y sintaxis asociadas\nRStudio Desktop: IDE para desarrollo en el lenguaje de programación R, el cual también puede manejar código en otros lenguajes de programación y sintaxis.\n\nNo se recomienda el uso de procesadores de texto (ej. Microsoft Word, Libre Office Writer), debido a que introducen caracteres especiales que no son reconocidos por Markdown."
  },
  {
    "objectID": "01-markdown.html#sintaxis",
    "href": "01-markdown.html#sintaxis",
    "title": "1  Markdown",
    "section": "1.6 Sintaxis",
    "text": "1.6 Sintaxis\nEn esta sección, se muestran los principales elementos de sintaxis de Markdown y sus salidas.\n\n\n\n1.6.1 Encabezados\nHay seis niveles de encabezados en Markdown, siendo el nivel 1 el de letras más grandes y el 6 el de letras más pequeñas. Se especifican mediante símbolos de numeral (#) antes del texto del encabezado (note el espacio entre el último signo de numeral y el inicio del texto).\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n# Encabezado de nivel 1\n\n\n\nEncabezado de nivel 1\n\n\n\n\n\n## Encabezado de nivel 2\n\n\n\nEncabezado de nivel 2\n\n\n\n\n\n### Encabezado de nivel 3\n\n\n\nEncabezado de nivel 3\n\n\n\n\n\n#### Encabezado de nivel 4\n\n\n\nEncabezado de nivel 4\n\n\n\n\n\n##### Encabezado de nivel 5\n\n\n\nEncabezado de nivel 5\n\n\n\n\n\n###### Encabezado de nivel 6\n\n\n\nEncabezado de nivel 6\n\n\n\n\n\nPara los encabezados de nivel 1 y nivel 2, existe una sintaxis alterna, con símbolos de igual (=====) o guiones (-----) bajo el texto del encabezado.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nOtro encabezado de nivel 1 ==========================\n\n\n\n\nOtro encabezado de nivel 1\n\n\n\n\n\nOtro encabezado de nivel 2 --------------------------\n\n\n\nOtro encabezado de nivel 2\n\n\n\n\n\n\n\n1.6.2 Párrafos\nLos párrafos deben separarse mediante (al menos) una línea en blanco. Un simple cambio de línea no generará un nuevo párrafo.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nEste es el texto que corresponde al primer párrafo de un documento.\nEste es el texto que corresponde al segundo párrafo de un documento.\n\n\nEste es el texto que corresponde al primer párrafo de un documento.\nEste es el texto que corresponde al segundo párrafo de un documento.\n\n\n\n\n\n\n1.6.3 Negrita\nHay dos sintaxis para especificar texto en negrita: con dos asteriscos (**) o con dos guiones bajos (__), antes y después del texto.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n**Texto en negrita**\n\n\nTexto en negrita\n\n\n\n\n__Otro texto en negrita__\n\n\nOtro texto en negrita\n\n\n\n\n\n\n1.6.4 Itálica\nHay dos sintaxis para especificar texto en itálica: con un asterisco (*) o con un guión bajo (_), antes y después del texto.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n*Texto en itálica*\n\n\nTexto en itálica\n\n\n\n\n_Otro texto en itálica_\n\n\nOtro texto en itálica\n\n\n\n\n\n\n1.6.5 Citas textuales\nSe especifican con un símbolo de “mayor que” (>) antes de cada línea.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n> *And on the pedestal these words appear:* > *\"My name is Ozymandias, king of kings:* > *Look on my works, ye Mighty, and despair!\"* *Percy Bysshe Shelley, \"Ozymandias\" (1818)*\n\n\n\n “And on the pedestal these words appear:”My name is Ozymandias, king of kings: Look on my works, ye Mighty, and despair!“ \n\nPercy Bysshe Shelley, “Ozymandias” (1818)\n\n\n\n\n\n\n1.6.6 Enlaces (hipervínculos)\nSe definen con paréntesis cuadrados ([]) seguidos de paréntesis redondos (()). En los paréntesis cuadrados se coloca (opcionalmente) el texto del enlace y en los redondos la dirección del documento al que conduce el enlace.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n[Proyecto Gutenberg](https://www.gutenberg.org/)\n\n\nProyecto Gutenberg\n\n\n\n\n\n\n1.6.7 Imágenes\nSe definen con un signo de admiración de cierre (!), paréntesis cuadrados ([]) y paréntesis redondos (()). En los paréntesis cuadrados se coloca (opcionalmente) un texto alternativo de la imagen y en los redondos la dirección de la imagen, ya sea local o remota.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n![Imagen local](img/Jupiter_and_the_Galilean_Satellites.jpg)\n\n\n\n\n\n\n\n![Imagen remota](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Jupiter_and_the_Galilean_Satellites.jpg/168px-Jupiter_and_the_Galilean_Satellites.jpg)\n\n\n\n\n\n\n\n\n\n1.6.8 Listas numeradas\nSe definen con números (1. 2. 3. ...) antes de cada elemento.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n1. Primer elemento.\n2. Segundo elemento.\n3. Tercer elemento.\n\n\n\n\nPrimer elemento.\nSegundo elemento.\nTercer elemento.\n\n\n\n\n\n\n\n1.6.9 Listas no numeradas\nSe definen con guiones (-) o asteriscos (*) antes de cada elemento.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n- Un elemento.\n- Otro elemento.\n- Otro elemento más.\n\n\n\n\nUn elemento.\n\nOtro elemento.\n\nOtro elemento más.\n\n\n\n\n\n\n\n\n1.6.10 Ecuaciones\nLas ecuaciones se escriben con base en la sintaxis de LaTeX. Se delimitan (al inicio y al final) con:\n\nUn símbolo de dólar ($), para ecuaciones dentro de un renglón (inline math).\nDos símbolos de dólar ($$), para ecuaciones en su propio bloque (display math).\n\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nEquivalencia entre masa y energía: $E = mc^{2}$\n\n\n\nEquivalencia entre masa y energía: \\(E = mc^{2}\\)\n\n\n\n\nEquivalencia entre masa y energía: $$E = mc^{2}$$\n\n\nEquivalencia entre masa y energía:\n\\[E = mc^{2}\\]\n\n\n\n\nPara más detalles sobre la sintaxis de ecuaciones, se recomienda consultar:\n\nWriting mathematical expressions - GitHub Docs\nLaTeX/Mathematics"
  },
  {
    "objectID": "01-markdown.html#ejercicios",
    "href": "01-markdown.html#ejercicios",
    "title": "1  Markdown",
    "section": "1.7 Ejercicios",
    "text": "1.7 Ejercicios\n\nCon RStudio, cree un documento Markdown llamado README.md y escriba en este un breve curriculum académico o profesional.\n\nIncluya información como: nombre, fotografía, datos de contacto, áreas de interés, carrera, cursos aprobados, publicaciones, etc.\nPuede usar información ficticia (no incluya datos confidenciales o sensibles).\nEspecifique la fuente de las imágenes (y de cualquier otra información para la que sea necesario) y no utilice imágenes para las que no tiene autorización. Considere utilizar sitios con imágenes con licencias abiertas (ej. Wikimedia Commons, Unsplash, FreeImages).\nAsegúrese de utilizar los siguientes elementos de sintaxis Markdown:\n\nVarios niveles de encabezados.\nNegritas e itálicas.\nListas.\nEnlaces a sitios web.\nImágenes (al menos una local y una remota)."
  },
  {
    "objectID": "01-markdown.html#recursos-de-interés",
    "href": "01-markdown.html#recursos-de-interés",
    "title": "1  Markdown",
    "section": "1.8 Recursos de interés",
    "text": "1.8 Recursos de interés\n\nDaring Fireball: Markdown (sitio oficial de Markdown)\nHow to Install R on Windows, Mac OS X, and Ubuntu Tutorial\nMarkdown Guide\nQuarto - Markdown Basics\nWriting mathematical expressions - GitHub Docs\nLaTeX/Mathematics"
  },
  {
    "objectID": "02-git.html#resumen",
    "href": "02-git.html#resumen",
    "title": "2  Git",
    "section": "2.1 Resumen",
    "text": "2.1 Resumen\nGit es un sistema para administrar versiones de código fuente o, en general, de cualquier conjunto de archivos.\nEn este capítulo, se estudia el funcionamiento de Git y la forma de sincronizar repositorios según su protocolo."
  },
  {
    "objectID": "02-git.html#trabajo-previo",
    "href": "02-git.html#trabajo-previo",
    "title": "2  Git",
    "section": "2.2 Trabajo previo",
    "text": "2.2 Trabajo previo\n\n2.2.1 Instalación de software\n\nGit\n\n\n\n2.2.2 Tutoriales\n\nGit and GitHub Tutorial – Version Control for Beginners\n\n\n\n2.2.3 Otros\nCree una cuenta gratuita en la plataforma de desarrollo colaborativo de software GitHub."
  },
  {
    "objectID": "02-git.html#descripción-general",
    "href": "02-git.html#descripción-general",
    "title": "2  Git",
    "section": "2.3 Descripción general",
    "text": "2.3 Descripción general\nGit es un sistema de control de versiones diseñado para “rastrear” cambios en el código fuente durante el proceso de desarrollo de software. Sin embargo, puede ser utilizado para llevar el control de los cambios en cualquier conjunto de archivos (ej. documentación, música).\nUn sistema de control de versiones proporciona, entre otras ventajas:\n\nLa capacidad de recuperar versiones anteriores de los archivos.\nLa capacidad de integrar modificaciones efectuadas por varias personas en el mismo conjunto de archivos.\nLa capacidad de mantener varias “ramas” (branches) de un producto (ej. “estable”, “evaluación”, “inestable”, como en el caso de Debian Linux, GRASS GIS y muchos otros proyectos de software libre).\nFacilidades para mantener redundancia y respaldos de los archivos (ej. Programa de respaldos de GitHub). Esta es una facilidad que implementan algunos servicios en la nube.\n\nGit fue diseñado por Linus Torvalds en 2005 durante del desarrollo del kernel del sistema operativo Linux. Se caracteriza por ser un sistema de control de versiones distribuido, lo que significa que el código fuente puede estar alojado en la estación de trabajo de cualquier miembro del equipo de desarrollo. No requiere un repositorio “central”, pero también puede trabajar de esa forma.\nEl protocolo de Git es utilizado en varios sitios que proveen servicios de alojamiento de software, entre los que están SourceForge, Bitbucket, GitLab y GitHub."
  },
  {
    "objectID": "02-git.html#funcionamiento-de-git",
    "href": "02-git.html#funcionamiento-de-git",
    "title": "2  Git",
    "section": "2.4 Funcionamiento de Git",
    "text": "2.4 Funcionamiento de Git\nDesde el punto de vista de un usuario de Git (ej. un programador), Git se utiliza para sincronizar la versión local (i.e. en una computadora personal) de un conjunto de archivos, llamado proyecto o repositorio, con la versión que está alojada en un sistema remoto (ej. GitHub). Cada repositorio se almacena en un directorio (carpeta) del sistema operativo. La sincronización se realiza principalmente a través de dos operaciones:\n\npush: para “subir” al repositorio remoto los cambios realizados en el repositorio local. Esta operación se realiza mediante el comando git push. Es probable que el sistema remoto le solicite al usuario algún tipo de autenticación (ej. nombre de usuario y clave).\npull: para “bajar” al repositorio local los cambios realizados en el repositorio remoto. Esta operación se realiza mediante el comando git pull.\n\nLas operaciones push y pull se ilustran en la Figure 2.1.\n\n\n\n\n\nFigure 2.1: Operaciones push y pull. Imagen de Melinda Higgins.\n\n\n\n\nAntes de un push, el usuario debe seleccionar los archivos que desea subir mediante el comando git add, el cual pasa los archivos a un “área de espera” (staging area). Luego debe usarse el comando git commit para “guardar” los cambios pendientes en el área de espera. Cada commit guarda el estado del conjunto de archivos en un momento específico (snapshot).\nLa relación entre estas operaciones de Git, se ilustra en la Figure 2.2.\n\n\n\n\n\nFigure 2.2: Operaciones de Git. Imagen de Steven Klavins.\n\n\n\n\nEn la Figure 2.3, se muestra el funcionamiento de Git mediante una comparación con el procesamiento de una compra en línea.\n\n\n\n\n\nFigure 2.3: Operaciones de Git y compras en línea. Imagen de Melinda Higgins.\n\n\n\n\nOtras operaciones de Git de uso frecuente son:\n\ngit config: para especificar opciones globales de la sesión de Git (ej. nombre del usuario, dirección de correo electrónico).\ngit init: para inicializar un repositorio git.\ngit clone: para clonar (i.e. copiar) un repositorio remoto en la computadora local.\ngit status: para revisar el estado de los archivos y, por ejemplo, saber cuales deben pasarse al área de espera.\ngit log: para revisar el historial de commits.\ngit show: para visualizar los cambios efectuados en los commits.\ngit reset: para regresar al estado correspondiente a un commit anterior."
  },
  {
    "objectID": "02-git.html#github",
    "href": "02-git.html#github",
    "title": "2  Git",
    "section": "2.5 GitHub",
    "text": "2.5 GitHub\nGitHub es una plataforma para desarrollo colaborativo de software basada en Git. Le permite a sus usuario mantener repositorios Git en su infraestructura en la nube y una serie de servicios asociados, como GitHub Pages, para el hospedaje de sitios web."
  },
  {
    "objectID": "02-git.html#ejercicios",
    "href": "02-git.html#ejercicios",
    "title": "2  Git",
    "section": "2.6 Ejercicios",
    "text": "2.6 Ejercicios\n\nClonación de un repositorio remoto, edición local y sincronización de repositorios.\n\nRealice un fork a su cuenta en GitHub del repositorio localizado en la dirección https://github.com/mesa-monitoreo-puntos/repositorio-ejemplo-git. Obtendrá un repositorio llamado “https://github.com/[nombre-usuario]/repositorio-ejemplo-git”, en donde [nombre-usuario] es su nombre de usuario en GitHub.\nCon la opción File - New Project - Version Control - Git, de RStudio, clone a su computadora el repositorio que acaba de bifurcar.\nCon el editor de RStudio, abra el archivo README.md, agregue una línea y guarde el archivo.\nCon la opción Add File - Upload Files, de la interfaz de GitHub, suba el archivo README.md a su repositorio. Especifique un comentario para la operación commit.\nRevise los cambios aplicados en el repositorio en GitHub.\nAgregue más líneas al archivo del repositorio local y sincronícelo con el remoto. Recuerde que los comentarios de cada commit deben reflejar los cambios que están siendo aplicados.\n\nPublicación de un sitio web en GitHub Pages.\n\nCree un nuevo repositorio en su cuenta en GitHub y suba el archivo README.md que escribió como ejercicio en el capítulo sobre Markdown.\nPublique el repositorio como un sitio web de GitHub Pages.\n\nDesarrollo y publicación de un sitio web.\n\nCree un nuevo repositorio en su cuenta en GitHub.\nCon la opción File - New Project - Version Control - Git, de RStudio, clone el nuevo repositorio a su computadora.\nCree un archivo llamado README.md e introduzca el texto disponible en este enlace.\nPublique el repositorio como un sitio GitHub Pages. Debe verse como en las siguientes imágenes:\n\n\n\n\n\n\n\n\n\n\n\n\n\nProcure incluir en su documento los siguientes componentes:\n\nEncabezados.\nNegritas e itálicas.\nCitas textuales.\nImagen de la figura 1 (el archivo está en ZiemannEtAlFig1.png.\nHipervínculos (además de los dos de la bibliografía, incluya uno al sitio web de la FDA en https://www.fda.gov/, en donde se mencionan las siglas)."
  },
  {
    "objectID": "02-git.html#recursos-de-interés",
    "href": "02-git.html#recursos-de-interés",
    "title": "2  Git",
    "section": "2.7 Recursos de interés",
    "text": "2.7 Recursos de interés\n\nGit (sitio oficial de Git)\nGitHub Archive Program\nReproducible Templates for Analysis and Dissemination\nVersion Control part 1"
  },
  {
    "objectID": "03-quarto.html#resumen",
    "href": "03-quarto.html#resumen",
    "title": "3  Quarto",
    "section": "3.1 Resumen",
    "text": "3.1 Resumen\nQuarto es un sistema de publicación de documentos técnicos y científicos, basado en código abierto. Estos documentos combinan código fuente en varios lenguajes de programación, y sus salidas (ej. tablas, gráficos, mapas), con la sintaxis de Markdown.\nEn este capítulo, se estudia la sintaxis básica de Quarto y se muestran algunos ejemplos de cómo combinarla con código en R."
  },
  {
    "objectID": "03-quarto.html#trabajo-previo",
    "href": "03-quarto.html#trabajo-previo",
    "title": "3  Quarto",
    "section": "3.2 Trabajo previo",
    "text": "3.2 Trabajo previo\n\n3.2.1 Instalación de software\nQuarto puede instalarse como una biblioteca del sistema operativo. Además, varios editores de texto y entornos integrados de programación (ej. VS Code, RStudio, Vim) pueden configurarse para crear documentos Quarto.\nEn este curso, se utilizará RStudio, que a partir de la versión v2022.07 tiene incorporados los componentes necesarios para trabajar con Quarto.\n\n\n3.2.2 Tutoriales\n\nQuarto - Tutorial: Hello, Quarto"
  },
  {
    "objectID": "03-quarto.html#descripción-general",
    "href": "03-quarto.html#descripción-general",
    "title": "3  Quarto",
    "section": "3.3 Descripción general",
    "text": "3.3 Descripción general\nQuarto es un sistema de publicación de documentos técnicos y científicos, basado en código abierto. Entre sus principales capacidades están:\n\nCrear contenido dinámico con los lenguajes R, Python, Julia y Observable.\nCrear documentos Markdown de texto plano o cuadernos de notas de Jupyter.\nPublicar artículos académicos, reportes, presentaciones, sitios web, blogs y libros en HTML, PDF, MS Word, ePub y otros formatos.\nCrear contenido científico, incluyendo ecuaciones, citas bibliográficas, referencias cruzadas, figuras y otros elementos.\n\nQuarto fue anunciado oficialmente por Posit (anteriormente, la Fundación RStudio) en julio de 2022, como la siguiente generación de R Markdown, un formato que permite insertar código en R, y sus salidas, en documentos escritos en Markdown. R Markdown fue introducido por Yihui Xie en 2012, junto con el paquete knitr, cuyo propósito es facilitar la investigación reproducible en R a través de la programación literaria (literate programming), un paradigma de programación propuesto por Donald Knuth en 1984.\nLos programas “literarios” (o “letrados”) están escritos como una exposición lógica en un lenguaje humano similar a la explicación de las fórmulas y ecuaciones empleadas para representar y resolver un problema en un texto de física o de matemáticas. En estos programas, se describe el análisis del problema, su solución y su implementación, intercalando código fuente entre los párrafos (y otros contenidos como imágenes, tablas, gráficos estadísticos y mapas), de forma similar a como en los textos de matemáticas se intercalan las fórmulas y las ecuaciones. La programación literaria puede mejorar enormemente un programa, ya que permite documentar ampliamente en qué consiste el problema a resolver, cómo se resuelve, cómo y por qué se adoptó cierto diseño, cómo se optimizó y cómo se implementó en un lenguaje de programación."
  },
  {
    "objectID": "03-quarto.html#anatomía-de-un-documento-quarto",
    "href": "03-quarto.html#anatomía-de-un-documento-quarto",
    "title": "3  Quarto",
    "section": "3.4 Anatomía de un documento Quarto",
    "text": "3.4 Anatomía de un documento Quarto\nUn documento Quarto tiene tres tipos de contenido:\n\nMetadatos en YAML.\nNarrativa en Markdown.\nBloques de código fuente.\n\n\n3.4.1 Metadatos en YAML\nTodo documento Quarto inicia con un encabezado en la sintaxis YAML (YAML Ain’t Markup Language), el cual contiene metadatos del documento como el título, el autor, la fecha de creación, el formato de salida y la estructura de la tabla de contenidos, entre muchos otros.\nUn encabezado YAML comienza y termina con tres guiones (---) y contiene un conjunto de campos y valores de la forma:\n---\ncampo01: valor01\ncampo02: valor02\ncampo0n: valor0n\n---\nPor ejemplo, un encabezado YAML típico puede ser el siguiente:\n---\ntitle: Mi primer documento Quarto\nformat: html\neditor: visual\n---\nLos campos del encabezado pueden anidarse con sangrías de dos espacios como, por ejemplo:\n---\nformat:\n  html:\n    toc: true\n    toc_float: true\n---\nLos elementos de metadatos que pueden especificarse en el encabezado, pueden variar de acuerdo al formato de salida, como puede verse en los siguientes enlaces:\n\nElementos de metadatos para HTML\nElementos de metadatos para PDF\nElementos metadatos para MS Word\n\nExisten elementos de metadatos para muchos otros formatos de salida (OpenOffice, ePub, presentaciones, wikis, etc.), como puede apreciarse en la Referencia de Quarto.\n\n\n3.4.2 Narrativa en Markdown\nLa narrativa proporciona estructura y contenido al documento en la forma de encabezados, párrafos, enlaces y otros elementos de la sintaxis de Markdown.\n\n\n3.4.3 Bloques de código fuente\nEn Quarto, los bloques (chunks) de código fuente se delimitan con tres backticks, tanto al inicio como al final del bloque. Los bloques en R se identifican con {r} y se configuran con diferentes opciones que inician con #|. Los bloques de otros lenguajes de programación se identifican con {python} y {julia}, por ejemplo.\nEl siguiente es un ejemplo de bloque de código en R y su salida:\n```{r}\n#| label: graficacion-cars\n#| include: true\n#| echo: true\n\nplot(\n  x = cars$speed,\n  y = cars$dist,\n  main = \"Velocidad vs distancia de frenado\",\n  xlab = \"Velocidad (mph)\",\n  ylab = \"Distancia (pies)\"\n)\n```\n\n\n\n\n\nLa opción label se utiliza para etiquetar el bloque. La de include para especificar si se desea que el bloque y sus resultados se incluyan en el documento de salida. Por su parte, echo indica si el código fuente debe desplegarse o no."
  },
  {
    "objectID": "03-quarto.html#cómo-funciona-quarto",
    "href": "03-quarto.html#cómo-funciona-quarto",
    "title": "3  Quarto",
    "section": "3.5 ¿Cómo funciona Quarto?",
    "text": "3.5 ¿Cómo funciona Quarto?\nQuarto se apoya en knitr y en Pandoc. knitr ejecuta el código en R (u otro lenguaje) y convierte los documentos a Markdown. Por su parte, Pandoc exporta los documentos Markdown al formato de salida deseado (ej. HTML, PDF, MS Word, MS PowerPoint). Este proceso se ilustra en la Figure 3.1.\n\n\n\n\n\nFigure 3.1: Conversión de un documento Quarto (.qmd) a su formato de salida. Imagen de quarto.org."
  },
  {
    "objectID": "03-quarto.html#herramientas-para-escritura",
    "href": "03-quarto.html#herramientas-para-escritura",
    "title": "3  Quarto",
    "section": "3.6 Herramientas para escritura",
    "text": "3.6 Herramientas para escritura\n\n3.6.1 Figuras\n\n3.6.1.1 Sintaxis básica\nEn su forma más básica, una figura puede crearse en Quarto con la misma sintaxis de Markdown (específicamente Pandoc Markdown).\n![Jaguar (*Panthera onca*). Imagen del *U.S. Fish and Wildlife Service*.](img/jaguar.jpg)\n\n\n\nJaguar (Panthera onca). Imagen del U.S. Fish and Wildlife Service.\n\n\nNótese como el texto entre paréntesis cuadrados se despliega al pie de la figura. En algunos formatos de salida (ej. PDF, LaTeX), las figuras se numeran automáticamente.\n\n\n3.6.1.2 Tamaño\nPor defecto, las figuras se despliegan con su tamaño nativo. Este puede modificarse con los atributos width y height, los cuales utilizan pixeles como unidad de medida por defecto.\n![Jaguar](img/jaguar.jpg){width=300}\n\n\n\nJaguar\n\n\nSi se usa solo uno de los atributos, el otro se ajusta automáticamente. Pueden usarse otras unidades de medida como porcentajes, pulgadas o milímetros.\n![Jaguar](img/jaguar.jpg){width=80%}\n\n\n\nJaguar\n\n\n![Jaguar](img/jaguar.jpg){height=3in}\n\n\n\nJaguar\n\n\n![Jaguar](img/jaguar.jpg){height=76.2mm}\n\n\n\nJaguar\n\n\n\n\n3.6.1.3 Enlaces\nUna figura puede funcionar como un enlace a otro documento. La dirección del enlace se escribe entre paréntesis redondos.\n[![Jaguar](img/jaguar.jpg){height=50mm}](https://es.wikipedia.org/wiki/Panthera_onca)\n\n\n\nJaguar\n\n\n\n\n3.6.1.4 Alineación\nLa alineación por defecto de las figuras es en el centro. Se pueden elegir otras alineaciones mediante el atributo fig-align.\n![Puma](img/puma.jpg){fig-align=\"right\" height=50mm}\n\n\n\nPuma\n\n\n\n\n3.6.1.5 Referencias\nPara crear referencias a figuras, deben identificarse con el prefijo fig-. Luego, pueden referenciarse con el prefijo @. Por ejemplo:\nActualmente, el portal de datos de la Infraestructura Mundial\nde Información en Biodiversidad (GBIF) agrupa más de \ndos mil millones de registros de presencia de especies, \ncuya distribución espacial puede observarse en la @fig-mapagbif.\n\n![Distribución espacial de los registros de presencia agrupados por GBIF](img/mapa-gbif.png){#fig-mapagbif}\nActualmente, el portal de datos de la Infraestructura Mundial de Información en Biodiversidad (GBIF) agrupa más de dos mil millones de registros de presencia de especies, cuya distribución espacial puede observarse en la Figure 3.2.\n\n\n\nFigure 3.2: Distribución espacial de los registros de presencia agrupados por GBIF\n\n\n\n\n3.6.1.6 Grupos de figuras\nPara mostrar varias figuras como un grupo, puede crearse una división (div) con los caracteres :::, al inicial y al final. Por ejemplo:\n::: {#fig-felinos-grandes-costarica layout-ncol=2}\n\n![Jaguar (*Panthera onca*)](img/panthera_onca_miniatura.png){#fig-jaguar}\n\n![Puma (*Puma concolor*)](img/puma_concolor_miniatura.png){#fig-puma}\n\nFelinos más grandes de Costa Rica\n:::\n\n\n\n\n\n\n\n(a) Jaguar (Panthera onca)\n\n\n\n\n\n\n\n(b) Puma (Puma concolor)\n\n\n\n\nFigure 3.3: Felinos más grandes de Costa Rica\n\n\nEl atributo layout-ncol especifica el número de columnas.\n::: {#fig-felinos-costarica layout-ncol=2}\n\n![Jaguar (*Panthera onca*)](img/panthera_onca_miniatura.png){#fig-jaguar}\n\n![Puma (*Puma concolor*)](img/puma_concolor_miniatura.png){#fig-puma}\n\n![Manigordo (*Leopardus pardalis*)](img/leopardus_pardalis_miniatura.png){#fig-manigordo}\n\n![Yaguarondí (*Puma yagouaroundi*)](img/puma_yagouaroundi_miniatura.png){#fig-yaguarondi}\n\n![Caucel (*Leopardus wiedii*)](img/leopardus_wiedii_miniatura.png){#fig-caucel}\n\n![Tigrillo (*Leopardus tigrinus*)](img/leopardus_tigrinus_miniatura.png){#fig-tigrinus}\n\nTodos los felinos de Costa Rica\n:::\n\n\n\n\n\n\n\n(a) Jaguar (Panthera onca)\n\n\n\n\n\n\n\n(b) Puma (Puma concolor)\n\n\n\n\n\n\n\n(c) Manigordo (Leopardus pardalis)\n\n\n\n\n\n\n\n\n\n(d) Yaguarondí (Puma yagouaroundi)\n\n\n\n\n\n\n\n(e) Caucel (Leopardus wiedii)\n\n\n\n\n\n\n\n(f) Tigrillo (Leopardus tigrinus)\n\n\n\n\nFigure 3.4: Todos los felinos de Costa Rica\n\n\nPara más detalles sobre referencias, se recomienda consultar Quarto - Figures."
  },
  {
    "objectID": "03-quarto.html#recursos-de-interés",
    "href": "03-quarto.html#recursos-de-interés",
    "title": "3  Quarto",
    "section": "3.7 Recursos de interés",
    "text": "3.7 Recursos de interés\n\nQuarto - Figures"
  }
]