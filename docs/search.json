[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Desarrollo de capacidades",
    "section": "",
    "text": "Este sitio contiene un conjunto de temas de capacitación que son de interés para la Mesa de Monitoreo por Puntos del Sistema Nacional de Monitoreo de Cobertura y Uso de la Tierra y Ecosistemas (SIMOCUTE).\n\nMarkdown: lenguaje de marcado ligero para comunicación técnica y científica.\nGit: sistema para control de versiones.\nQuarto: sistema de publicación de documentos técnicos y científicos.\nR: lenguaje de programación para análisis estadístico."
  },
  {
    "objectID": "01-markdown.html",
    "href": "01-markdown.html",
    "title": "1  Markdown",
    "section": "",
    "text": "Markdown es un lenguaje de marcado ligero ampliamente utilizado en comunicación científica, documentación de programas e investigación reproducible, entre otras aplicaciones. Incluye marcas para especificar aspectos de estructura, semántica y estilo de un documento. Se basa en texto simple y se convierte fácilmente a HTML, el lenguaje de marcado más utilizado en páginas web.\nMarkdown puede emplearse junto con lenguajes de programación (ej. R, Python) para así combinar texto con código fuente, el cual inserta en los documentos salidas como tablas, gráficos y mapas, entre otras. Esta forma de trabajo facilita la automatización y la reproducibilidad de una investigación.\nEn este capítulo, se explican los principales elementos de la sintaxis de Markdown y como utilizarlos en la creación de documentos."
  },
  {
    "objectID": "01-markdown.html#trabajo-previo",
    "href": "01-markdown.html#trabajo-previo",
    "title": "1  Markdown",
    "section": "1.2 Trabajo previo",
    "text": "1.2 Trabajo previo\n\n1.2.1 Instalación de software\nPara la edición de código Markdown, en el contexto de la programación en R, se recomienda instalar:\n\nSistema base del lenguaje R (no es necesario para este capítulo, pero sí se utilizará más adelante)\nRStudio Desktop\n\nOpcionalmente, puede instalar Visual Studio Code u otro editor de código fuente.\n\n\n1.2.2 Tutoriales\n\nMarkdown Tutorial"
  },
  {
    "objectID": "01-markdown.html#descripción-general",
    "href": "01-markdown.html#descripción-general",
    "title": "1  Markdown",
    "section": "1.3 Descripción general",
    "text": "1.3 Descripción general\nMarkdown es un lenguaje de marcado, creado en 2004 por John Gruber y Aaron Swartz. Las “marcas” se utilizan para especificar aspectos de la estructura (ej. títulos, encabezados), estilo (ej. negritas, itálicas) y semántica de un documento. Markdown se caracteriza por ser más sencillo de leer y de usar que otros lenguajes de marcado (ej. Lenguaje de Marcado de Hipertexto o HTML), por lo que se considera un lenguaje de marcado ligero.\nLos documentos escritos en Markdown pueden exportarse a una gran variedad de formatos (ej. HTML, DOC, PDF, LaTex) para ser usados en libros, presentaciones o páginas web, entre otros fines.\n\n1.3.1 Variaciones\nLas variaciones de Markdown, también llamadas flavors, son extensiones o modificaciones de la especificación original. Entre las más populares están:\n\nR Markdown: para el lenguaje R.\nQuarto: es la “siguiente generación” de R Markdown, con soporte para más lenguajes de programación (Python, Julia, Observable, R) y motores de procesamiento (Jupyter, Knitr), entre otras mejoras.\nPython Markdown: para el lenguaje Python.\nGitHub Flavored Markdown: para la plataforma GitHub.\nPandoc’s Markdown: para el programa Pandoc de conversión entre formatos.\nKramdown: para el lenguaje Ruby.\n\nPuede encontrarse una lista más extensa de variaciones de Markdown en Markdown Flavors."
  },
  {
    "objectID": "01-markdown.html#ejemplo-de-documento",
    "href": "01-markdown.html#ejemplo-de-documento",
    "title": "1  Markdown",
    "section": "1.4 Ejemplo de documento",
    "text": "1.4 Ejemplo de documento\nEl siguiente es un ejemplo de la sintaxis de Markdown, con marcas para un encabezado, texto en negrita, texto en itálica, un hipervínculo y una imagen.\n\n### Los satélites galileanos\n\nSe llaman **satélites galileanos** los cuatro satélites\nde Júpiter descubiertos en 1610 por \n[Galileo Galilei](https://es.wikipedia.org/wiki/Galileo_Galilei): \n*Ío*, *Europa*, *Ganimedes* y *Calisto*. \nSon los más grandes de los satélites de Júpiter, \nsiendo visibles incluso con telescopios de baja potencia.\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Jupiter_and_the_Galilean_Satellites.jpg/168px-Jupiter_and_the_Galilean_Satellites.jpg)\n\n**Figura 1**. Los cuatro satélites galileanos, \nen una composición que compara sus tamaños con el tamaño de Júpiter. \nEn orden descendente, son *Ío*, *Europa*, *Ganimedes* y *Calisto*.\n\nY la siguiente es la manera en la que se visualiza el documento:\n\n\nLos satélites galileanos\nSe llaman satélites galileanos los cuatro satélites de Júpiter descubiertos en 1610 por Galileo Galilei: Ío, Europa, Ganimedes y Calisto. Son los más grandes de los satélites de Júpiter, siendo visibles incluso con telescopios de baja potencia.\n\nFigura 1. Los cuatro satélites galileanos, en una composición que compara sus tamaños con el tamaño de Júpiter. En orden descendente, son Ío, Europa, Ganimedes y Calisto.\n\nEl contenido de este ejemplo fue tomado de Satélite galileano - Wikipedia, la enciclopedia libre."
  },
  {
    "objectID": "01-markdown.html#herramientas-para-escritura-de-documentos",
    "href": "01-markdown.html#herramientas-para-escritura-de-documentos",
    "title": "1  Markdown",
    "section": "1.5 Herramientas para escritura de documentos",
    "text": "1.5 Herramientas para escritura de documentos\nMarkdown se escribe en “texto simple o plano” (i.e. texto sin formato, compuesto únicamente por caracteres que son legibles por humanos), por lo que puede escribirse con cualquier editor de texto. Se recomienda el uso de editores orientados a programación, también llamados editores de código fuente, los cuales proporcionan facilidades para el programador, como coloración de palabras clave, sangrado y autocompletado, entre otras.\nTambién pueden utilizarse Entornos Integrados de Desarrollo o IDE, los cuales son aplicaciones informáticas que proporcionan servicios integrales para facilitarle al programador el desarrollo de software. Además de un editor de código fuente, un IDE incluye funciones para depuración (i.e. identificación de errores), interpretación y compilación de programas, entre otras.\nAlgunos de los editores de código fuente o IDE recomendados para Markdown son:\n\nVisual Studio Code: editor de código fuente muy popular y de código abierto. Puede editar código de múltiples lenguajes de programación y sintaxis asociadas\nRStudio Desktop: IDE para desarrollo en el lenguaje de programación R, el cual también puede manejar código en otros lenguajes de programación y sintaxis.\n\nNo se recomienda el uso de procesadores de texto (ej. Microsoft Word, Libre Office Writer), debido a que introducen caracteres especiales que no son reconocidos por Markdown."
  },
  {
    "objectID": "01-markdown.html#sintaxis",
    "href": "01-markdown.html#sintaxis",
    "title": "1  Markdown",
    "section": "1.6 Sintaxis",
    "text": "1.6 Sintaxis\nEn esta sección, se muestran los principales elementos de sintaxis de Markdown y sus salidas.\n\n\n\n1.6.1 Encabezados\nHay seis niveles de encabezados en Markdown, siendo el nivel 1 el de letras más grandes y el 6 el de letras más pequeñas. Se especifican mediante símbolos de numeral (#) antes del texto del encabezado (note el espacio entre el último signo de numeral y el inicio del texto).\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n# Encabezado de nivel 1\n\n\n\nEncabezado de nivel 1\n\n\n\n\n\n## Encabezado de nivel 2\n\n\n\nEncabezado de nivel 2\n\n\n\n\n\n### Encabezado de nivel 3\n\n\n\nEncabezado de nivel 3\n\n\n\n\n\n#### Encabezado de nivel 4\n\n\n\nEncabezado de nivel 4\n\n\n\n\n\n##### Encabezado de nivel 5\n\n\n\nEncabezado de nivel 5\n\n\n\n\n\n###### Encabezado de nivel 6\n\n\n\nEncabezado de nivel 6\n\n\n\n\n\nPara los encabezados de nivel 1 y nivel 2, existe una sintaxis alterna, con símbolos de igual (=====) o guiones (-----) bajo el texto del encabezado.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nOtro encabezado de nivel 1 ==========================\n\n\n\n\nOtro encabezado de nivel 1\n\n\n\n\n\nOtro encabezado de nivel 2 --------------------------\n\n\n\nOtro encabezado de nivel 2\n\n\n\n\n\n\n\n1.6.2 Párrafos\nLos párrafos deben separarse mediante (al menos) una línea en blanco. Un simple cambio de línea no generará un nuevo párrafo.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nEste es el texto que corresponde al primer párrafo de un documento.\nEste es el texto que corresponde al segundo párrafo de un documento.\n\n\nEste es el texto que corresponde al primer párrafo de un documento.\nEste es el texto que corresponde al segundo párrafo de un documento.\n\n\n\n\n\n\n1.6.3 Negrita\nHay dos sintaxis para especificar texto en negrita: con dos asteriscos (**) o con dos guiones bajos (__), antes y después del texto.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n**Texto en negrita**\n\n\nTexto en negrita\n\n\n\n\n__Otro texto en negrita__\n\n\nOtro texto en negrita\n\n\n\n\n\n\n1.6.4 Itálica\nHay dos sintaxis para especificar texto en itálica: con un asterisco (*) o con un guión bajo (_), antes y después del texto.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n*Texto en itálica*\n\n\nTexto en itálica\n\n\n\n\n_Otro texto en itálica_\n\n\nOtro texto en itálica\n\n\n\n\n\n\n1.6.5 Citas textuales\nSe especifican con un símbolo de “mayor que” (>) antes de cada línea.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n> *And on the pedestal these words appear:* > *\"My name is Ozymandias, king of kings:* > *Look on my works, ye Mighty, and despair!\"* *Percy Bysshe Shelley, \"Ozymandias\" (1818)*\n\n\n\n “And on the pedestal these words appear:”My name is Ozymandias, king of kings: Look on my works, ye Mighty, and despair!“ \n\nPercy Bysshe Shelley, “Ozymandias” (1818)\n\n\n\n\n\n\n1.6.6 Enlaces (hipervínculos)\nSe definen con paréntesis cuadrados ([]) seguidos de paréntesis redondos (()). En los paréntesis cuadrados se coloca (opcionalmente) el texto del enlace y en los redondos la dirección del documento al que conduce el enlace.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n[Proyecto Gutenberg](https://www.gutenberg.org/)\n\n\nProyecto Gutenberg\n\n\n\n\n\n\n1.6.7 Imágenes\nSe definen con un signo de admiración de cierre (!), paréntesis cuadrados ([]) y paréntesis redondos (()). En los paréntesis cuadrados se coloca (opcionalmente) un texto alternativo de la imagen y en los redondos la dirección de la imagen, ya sea local o remota.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n![Imagen local](img/Jupiter_and_the_Galilean_Satellites.jpg)\n\n\n\n\n\n\n\n![Imagen remota](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Jupiter_and_the_Galilean_Satellites.jpg/168px-Jupiter_and_the_Galilean_Satellites.jpg)\n\n\n\n\n\n\n\n\n\n1.6.8 Listas numeradas\nSe definen con números (1. 2. 3. ...) antes de cada elemento.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n1. Primer elemento.\n2. Segundo elemento.\n3. Tercer elemento.\n\n\n\n\nPrimer elemento.\nSegundo elemento.\nTercer elemento.\n\n\n\n\n\n\n\n1.6.9 Listas no numeradas\nSe definen con guiones (-) o asteriscos (*) antes de cada elemento.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n- Un elemento.\n- Otro elemento.\n- Otro elemento más.\n\n\n\n\nUn elemento.\n\nOtro elemento.\n\nOtro elemento más.\n\n\n\n\n\n\n\n\n1.6.10 Ecuaciones\nLas ecuaciones se escriben con base en la sintaxis de LaTeX. Se delimitan (al inicio y al final) con:\n\nUn símbolo de dólar ($), para ecuaciones dentro de un renglón (inline math).\nDos símbolos de dólar ($$), para ecuaciones en su propio bloque (display math).\n\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nEquivalencia entre masa y energía: $E = mc^{2}$\n\n\n\nEquivalencia entre masa y energía: \\(E = mc^{2}\\)\n\n\n\n\nEquivalencia entre masa y energía: $$E = mc^{2}$$\n\n\nEquivalencia entre masa y energía:\n\\[E = mc^{2}\\]\n\n\n\n\nPara más detalles sobre la sintaxis de ecuaciones, se recomienda consultar:\n\nWriting mathematical expressions - GitHub Docs\nLaTeX/Mathematics"
  },
  {
    "objectID": "01-markdown.html#ejercicios",
    "href": "01-markdown.html#ejercicios",
    "title": "1  Markdown",
    "section": "1.7 Ejercicios",
    "text": "1.7 Ejercicios\n\nCon RStudio, cree un documento Markdown llamado README.md y escriba en este un breve curriculum académico o profesional.\n\nIncluya información como: nombre, fotografía, datos de contacto, áreas de interés, carrera, cursos aprobados, publicaciones, etc.\nPuede usar información ficticia (no incluya datos confidenciales o sensibles).\nEspecifique la fuente de las imágenes (y de cualquier otra información para la que sea necesario) y no utilice imágenes para las que no tiene autorización. Considere utilizar sitios con imágenes con licencias abiertas (ej. Wikimedia Commons, Unsplash, FreeImages).\nAsegúrese de utilizar los siguientes elementos de sintaxis Markdown:\n\nVarios niveles de encabezados.\nNegritas e itálicas.\nListas.\nEnlaces a sitios web.\nImágenes (al menos una local y una remota)."
  },
  {
    "objectID": "01-markdown.html#recursos-de-interés",
    "href": "01-markdown.html#recursos-de-interés",
    "title": "1  Markdown",
    "section": "1.8 Recursos de interés",
    "text": "1.8 Recursos de interés\n\nDaring Fireball: Markdown (sitio oficial de Markdown)\nHow to Install R on Windows, Mac OS X, and Ubuntu Tutorial\nMarkdown Guide\nQuarto - Markdown Basics\nWriting mathematical expressions - GitHub Docs\nLaTeX/Mathematics"
  },
  {
    "objectID": "02-git.html",
    "href": "02-git.html",
    "title": "2  Git",
    "section": "",
    "text": "Git es un sistema para administrar versiones de código fuente o, en general, de cualquier conjunto de archivos.\nEn este capítulo, se estudia el funcionamiento de Git y la forma de sincronizar repositorios según su protocolo."
  },
  {
    "objectID": "02-git.html#trabajo-previo",
    "href": "02-git.html#trabajo-previo",
    "title": "2  Git",
    "section": "2.2 Trabajo previo",
    "text": "2.2 Trabajo previo\n\n2.2.1 Instalación de software\n\nGit\n\n\n\n2.2.2 Tutoriales\n\nGit and GitHub Tutorial – Version Control for Beginners\n\n\n\n2.2.3 Otros\nCree una cuenta gratuita en la plataforma de desarrollo colaborativo de software GitHub."
  },
  {
    "objectID": "02-git.html#descripción-general",
    "href": "02-git.html#descripción-general",
    "title": "2  Git",
    "section": "2.3 Descripción general",
    "text": "2.3 Descripción general\nGit es un sistema de control de versiones diseñado para “rastrear” cambios en el código fuente durante el proceso de desarrollo de software. Sin embargo, puede ser utilizado para llevar el control de los cambios en cualquier conjunto de archivos (ej. documentación, música).\nUn sistema de control de versiones proporciona, entre otras ventajas:\n\nLa capacidad de recuperar versiones anteriores de los archivos.\nLa capacidad de integrar modificaciones efectuadas por varias personas en el mismo conjunto de archivos.\nLa capacidad de mantener varias “ramas” (branches) de un producto (ej. “estable”, “evaluación”, “inestable”, como en el caso de Debian Linux, GRASS GIS y muchos otros proyectos de software libre).\nFacilidades para mantener redundancia y respaldos de los archivos (ej. Programa de respaldos de GitHub). Esta es una facilidad que implementan algunos servicios en la nube.\n\nGit fue diseñado por Linus Torvalds en 2005 durante del desarrollo del kernel del sistema operativo Linux. Se caracteriza por ser un sistema de control de versiones distribuido, lo que significa que el código fuente puede estar alojado en la estación de trabajo de cualquier miembro del equipo de desarrollo. No requiere un repositorio “central”, pero también puede trabajar de esa forma.\nEl protocolo de Git es utilizado en varios sitios que proveen servicios de alojamiento de software, entre los que están SourceForge, Bitbucket, GitLab y GitHub."
  },
  {
    "objectID": "02-git.html#funcionamiento-de-git",
    "href": "02-git.html#funcionamiento-de-git",
    "title": "2  Git",
    "section": "2.4 Funcionamiento de Git",
    "text": "2.4 Funcionamiento de Git\nDesde el punto de vista de un usuario de Git (ej. un programador), Git se utiliza para sincronizar la versión local (i.e. en una computadora personal) de un conjunto de archivos, llamado proyecto o repositorio, con la versión que está alojada en un sistema remoto (ej. GitHub). Cada repositorio se almacena en un directorio (carpeta) del sistema operativo. La sincronización se realiza principalmente a través de dos operaciones:\n\npush: para “subir” al repositorio remoto los cambios realizados en el repositorio local. Esta operación se realiza mediante el comando git push. Es probable que el sistema remoto le solicite al usuario algún tipo de autenticación (ej. nombre de usuario y clave).\npull: para “bajar” al repositorio local los cambios realizados en el repositorio remoto. Esta operación se realiza mediante el comando git pull.\n\nLas operaciones push y pull se ilustran en la Figure 2.1.\n\n\n\n\n\nFigure 2.1: Operaciones push y pull. Imagen de Melinda Higgins.\n\n\n\n\nAntes de un push, el usuario debe seleccionar los archivos que desea subir mediante el comando git add, el cual pasa los archivos a un “área de espera” (staging area). Luego debe usarse el comando git commit para “guardar” los cambios pendientes en el área de espera. Cada commit guarda el estado del conjunto de archivos en un momento específico (snapshot).\nLa relación entre estas operaciones de Git, se ilustra en la Figure 2.2.\n\n\n\n\n\nFigure 2.2: Operaciones de Git. Imagen de Steven Klavins.\n\n\n\n\nEn la Figure 2.3, se muestra el funcionamiento de Git mediante una comparación con el procesamiento de una compra en línea.\n\n\n\n\n\nFigure 2.3: Operaciones de Git y compras en línea. Imagen de Melinda Higgins.\n\n\n\n\nOtras operaciones de Git de uso frecuente son:\n\ngit config: para especificar opciones globales de la sesión de Git (ej. nombre del usuario, dirección de correo electrónico).\ngit init: para inicializar un repositorio git.\ngit clone: para clonar (i.e. copiar) un repositorio remoto en la computadora local.\ngit status: para revisar el estado de los archivos y, por ejemplo, saber cuales deben pasarse al área de espera.\ngit log: para revisar el historial de commits.\ngit show: para visualizar los cambios efectuados en los commits.\ngit reset: para regresar al estado correspondiente a un commit anterior."
  },
  {
    "objectID": "02-git.html#github",
    "href": "02-git.html#github",
    "title": "2  Git",
    "section": "2.5 GitHub",
    "text": "2.5 GitHub\nGitHub es una plataforma para desarrollo colaborativo de software basada en Git. Le permite a sus usuario mantener repositorios Git en su infraestructura en la nube y una serie de servicios asociados, como GitHub Pages, para el hospedaje de sitios web."
  },
  {
    "objectID": "02-git.html#ejercicios",
    "href": "02-git.html#ejercicios",
    "title": "2  Git",
    "section": "2.6 Ejercicios",
    "text": "2.6 Ejercicios\n\nClonación de un repositorio remoto, edición local y sincronización de repositorios.\n\nRealice un fork a su cuenta en GitHub del repositorio localizado en la dirección https://github.com/mesa-monitoreo-puntos/repositorio-ejemplo-git. Obtendrá un repositorio llamado “https://github.com/[nombre-usuario]/repositorio-ejemplo-git”, en donde [nombre-usuario] es su nombre de usuario en GitHub.\nCon la opción File - New Project - Version Control - Git, de RStudio, clone a su computadora el repositorio que acaba de bifurcar.\nCon el editor de RStudio, abra el archivo README.md, agregue una línea y guarde el archivo.\nCon la opción Add File - Upload Files, de la interfaz de GitHub, suba el archivo README.md a su repositorio. Especifique un comentario para la operación commit.\nRevise los cambios aplicados en el repositorio en GitHub.\nAgregue más líneas al archivo del repositorio local y sincronícelo con el remoto. Recuerde que los comentarios de cada commit deben reflejar los cambios que están siendo aplicados.\n\nPublicación de un sitio web en GitHub Pages.\n\nCree un nuevo repositorio en su cuenta en GitHub y suba el archivo README.md que escribió como ejercicio en el capítulo sobre Markdown.\nPublique el repositorio como un sitio web de GitHub Pages.\n\nDesarrollo y publicación de un sitio web.\n\nCree un nuevo repositorio en su cuenta en GitHub.\nCon la opción File - New Project - Version Control - Git, de RStudio, clone el nuevo repositorio a su computadora.\nCree un archivo llamado README.md e introduzca el texto disponible en este enlace.\nPublique el repositorio como un sitio GitHub Pages. Debe verse como en las siguientes imágenes:\n\n\n\n\n\n\n\n\n\n\n\n\n\nProcure incluir en su documento los siguientes componentes:\n\nEncabezados.\nNegritas e itálicas.\nCitas textuales.\nImagen de la figura 1 (el archivo está en ZiemannEtAlFig1.png.\nHipervínculos (además de los dos de la bibliografía, incluya uno al sitio web de la FDA en https://www.fda.gov/, en donde se mencionan las siglas)."
  },
  {
    "objectID": "02-git.html#recursos-de-interés",
    "href": "02-git.html#recursos-de-interés",
    "title": "2  Git",
    "section": "2.7 Recursos de interés",
    "text": "2.7 Recursos de interés\n\nGit (sitio oficial de Git)\nGitHub Archive Program\nReproducible Templates for Analysis and Dissemination\nVersion Control part 1"
  },
  {
    "objectID": "03-quarto.html",
    "href": "03-quarto.html",
    "title": "3  Quarto",
    "section": "",
    "text": "Quarto es un sistema de publicación de documentos técnicos y científicos, basado en código abierto. Estos documentos combinan código fuente en varios lenguajes de programación y sus salidas (ej. tablas, gráficos, mapas), con la sintaxis de Markdown.\nEn este capítulo, se estudia la sintaxis básica de Quarto y se presentan algunas de sus herramientas para la escritura de documentos."
  },
  {
    "objectID": "03-quarto.html#trabajo-previo",
    "href": "03-quarto.html#trabajo-previo",
    "title": "3  Quarto",
    "section": "3.2 Trabajo previo",
    "text": "3.2 Trabajo previo\n\n3.2.1 Instalación de software\nQuarto puede instalarse como una biblioteca del sistema operativo. Además, varios editores de texto y entornos integrados de programación (ej. VS Code, RStudio, Vim) pueden configurarse para crear documentos Quarto.\nEn este curso, se utilizará RStudio, que a partir de la versión v2022.07 tiene incorporados los componentes necesarios para trabajar con Quarto.\n\n\n3.2.2 Tutoriales\n\nQuarto - Tutorial: Hello, Quarto"
  },
  {
    "objectID": "03-quarto.html#descripción-general",
    "href": "03-quarto.html#descripción-general",
    "title": "3  Quarto",
    "section": "3.3 Descripción general",
    "text": "3.3 Descripción general\nQuarto es un sistema de publicación de documentos técnicos y científicos, basado en código abierto. Entre sus principales capacidades están:\n\nCrear contenido dinámico con los lenguajes R, Python, Julia y Observable.\nCrear documentos Markdown de texto plano o cuadernos de notas de Jupyter.\nPublicar artículos académicos, reportes, presentaciones, sitios web, blogs y libros en HTML, PDF, MS Word, ePub y otros formatos.\nCrear contenido científico, incluyendo ecuaciones, citas bibliográficas, referencias cruzadas, figuras y otros elementos.\n\nQuarto fue anunciado oficialmente por Posit (anteriormente, la Fundación RStudio) en julio de 2022, como la siguiente generación de R Markdown, un formato que permite insertar código en R, y sus salidas, en documentos escritos en Markdown. R Markdown fue introducido por Yihui Xie en 2012, junto con el paquete knitr, cuyo propósito es facilitar la investigación reproducible en R a través de la programación literaria (literate programming), un paradigma de programación propuesto por Donald Knuth en 1984.\nLos programas “literarios” (o “letrados”) están escritos como una exposición lógica en un lenguaje humano similar a la explicación de las fórmulas y ecuaciones empleadas para representar y resolver un problema en un texto de física o de matemáticas. En estos programas, se describe el análisis del problema, su solución y su implementación, intercalando código fuente entre los párrafos (y otros contenidos como imágenes, tablas, gráficos estadísticos y mapas), de forma similar a como en los textos de matemáticas se intercalan las fórmulas y las ecuaciones. La programación literaria puede mejorar enormemente un programa, ya que permite documentar ampliamente en qué consiste el problema a resolver, cómo se resuelve, cómo y por qué se adoptó cierto diseño, cómo se optimizó y cómo se implementó en un lenguaje de programación."
  },
  {
    "objectID": "03-quarto.html#anatomía-de-un-documento-quarto",
    "href": "03-quarto.html#anatomía-de-un-documento-quarto",
    "title": "3  Quarto",
    "section": "3.4 Anatomía de un documento Quarto",
    "text": "3.4 Anatomía de un documento Quarto\nUn documento Quarto tiene tres tipos de contenido:\n\nMetadatos en YAML.\nNarrativa en Markdown.\nBloques de código fuente.\n\n\n3.4.1 Metadatos en YAML\nTodo documento Quarto inicia con un encabezado en la sintaxis YAML (YAML Ain’t Markup Language), el cual contiene metadatos del documento como el título, el autor, la fecha de creación, el formato de salida y la estructura de la tabla de contenidos, entre muchos otros.\nUn encabezado YAML comienza y termina con tres guiones (---) y contiene un conjunto de campos y valores de la forma:\n---\ncampo01: valor01\ncampo02: valor02\ncampo0n: valor0n\n---\nPor ejemplo, un encabezado YAML típico puede ser el siguiente:\n---\ntitle: Mi primer documento Quarto\nformat: html\neditor: visual\n---\nLos campos del encabezado pueden anidarse con sangrías de dos espacios como, por ejemplo:\n---\nformat:\n  html:\n    toc: true\n    toc_float: true\n---\nLos elementos de metadatos que pueden especificarse en el encabezado, pueden variar de acuerdo al formato de salida, como puede verse en los siguientes enlaces:\n\nElementos de metadatos para HTML\nElementos de metadatos para PDF\nElementos metadatos para MS Word\n\nExisten elementos de metadatos para muchos otros formatos de salida (OpenOffice, ePub, presentaciones, wikis, etc.), como puede apreciarse en la Referencia de Quarto.\n\n\n3.4.2 Narrativa en Markdown\nLa narrativa proporciona estructura y contenido al documento en la forma de encabezados, párrafos, enlaces y otros elementos de la sintaxis de Markdown.\n\n\n3.4.3 Bloques de código fuente\nEn Quarto, los bloques (chunks) de código fuente se delimitan con tres backticks, tanto al inicio como al final del bloque. Los bloques en R se identifican con {r} y se configuran con diferentes opciones que inician con #|. Los bloques de otros lenguajes de programación se identifican con {python} y {julia}, por ejemplo.\nEl siguiente es un ejemplo de bloque de código en R y su salida:\n```{r}\n#| label: graficacion-cars\n#| include: true\n#| echo: true\n\nplot(\n  x = cars$speed,\n  y = cars$dist,\n  main = \"Velocidad vs distancia de frenado\",\n  xlab = \"Velocidad (mph)\",\n  ylab = \"Distancia (pies)\"\n)\n```\n\n\n\n\n\nLa opción label se utiliza para etiquetar el bloque. La de include para especificar si se desea que el bloque y sus resultados se incluyan en el documento de salida. Por su parte, echo indica si el código fuente debe desplegarse o no."
  },
  {
    "objectID": "03-quarto.html#cómo-funciona-quarto",
    "href": "03-quarto.html#cómo-funciona-quarto",
    "title": "3  Quarto",
    "section": "3.5 ¿Cómo funciona Quarto?",
    "text": "3.5 ¿Cómo funciona Quarto?\nQuarto se apoya en knitr y en Pandoc. knitr ejecuta el código en R (u otro lenguaje) y convierte los documentos a Markdown. Por su parte, Pandoc exporta los documentos Markdown al formato de salida deseado (ej. HTML, PDF, MS Word, MS PowerPoint). Este proceso se ilustra en la Figure 3.1.\n\n\n\n\n\nFigure 3.1: Conversión de un documento Quarto (.qmd) a su formato de salida. Imagen de quarto.org."
  },
  {
    "objectID": "03-quarto.html#herramientas-para-escritura",
    "href": "03-quarto.html#herramientas-para-escritura",
    "title": "3  Quarto",
    "section": "3.6 Herramientas para escritura",
    "text": "3.6 Herramientas para escritura\n\n3.6.1 Figuras\n\n3.6.1.1 Sintaxis básica\nEn su forma más básica, una figura puede crearse en Quarto con la misma sintaxis de Markdown (específicamente Pandoc Markdown).\n![Jaguar (*Panthera onca*). Imagen del *U.S. Fish and Wildlife Service*.](img/jaguar.jpg)\n\n\n\nJaguar (Panthera onca). Imagen del U.S. Fish and Wildlife Service.\n\n\nNótese como el texto entre paréntesis cuadrados se despliega al pie de la figura. En algunos formatos de salida (ej. PDF, LaTeX), las figuras se numeran automáticamente.\n\n\n3.6.1.2 Tamaño\nPor defecto, las figuras se despliegan con su tamaño nativo. Este puede modificarse con los atributos width y height, los cuales utilizan pixeles como unidad de medida por defecto.\n![Jaguar](img/jaguar.jpg){width=300}\n\n\n\nJaguar\n\n\nSi se usa solo uno de los atributos, el otro se ajusta automáticamente. Pueden usarse otras unidades de medida como porcentajes, pulgadas o milímetros.\n![Jaguar](img/jaguar.jpg){width=80%}\n\n\n\nJaguar\n\n\n![Jaguar](img/jaguar.jpg){height=3in}\n\n\n\nJaguar\n\n\n![Jaguar](img/jaguar.jpg){height=76.2mm}\n\n\n\nJaguar\n\n\n\n\n3.6.1.3 Enlaces\nUna figura puede funcionar como un enlace a otro documento. La dirección del enlace se escribe entre paréntesis redondos.\n[![Jaguar](img/jaguar.jpg){height=50mm}](https://es.wikipedia.org/wiki/Panthera_onca)\n\n\n\nJaguar\n\n\n\n\n3.6.1.4 Alineación\nLa alineación por defecto de las figuras es en el centro. Se pueden elegir otras alineaciones mediante el atributo fig-align.\n![Puma](img/puma.jpg){fig-align=\"right\" height=50mm}\n\n\n\nPuma\n\n\n![Puma](img/puma.jpg){fig-align=\"left\" height=50mm}\n\n\n\nPuma\n\n\n\n\n3.6.1.5 Referencias\nPara crear referencias a figuras, deben identificarse con el prefijo fig-. Luego, pueden referenciarse con el prefijo @. Por ejemplo:\nActualmente, el portal de datos de la Infraestructura Mundial\nde Información en Biodiversidad (GBIF) agrupa más de \ndos mil millones de registros de presencia de especies, \ncuya distribución espacial puede observarse en la @fig-mapagbif.\n\n![Distribución espacial de los registros de presencia agrupados por GBIF](img/mapa-gbif.png){#fig-mapagbif}\nActualmente, el portal de datos de la Infraestructura Mundial de Información en Biodiversidad (GBIF) agrupa más de dos mil millones de registros de presencia de especies, cuya distribución espacial puede observarse en la Figure 3.2.\n\n\n\nFigure 3.2: Distribución espacial de los registros de presencia agrupados por GBIF\n\n\n\n\n3.6.1.6 Grupos de figuras\nPara mostrar varias figuras como un grupo, puede crearse una división (div) con los caracteres :::, al inicial y al final. Por ejemplo:\n::: {#fig-felinos-grandes-costarica layout-ncol=2}\n\n![Jaguar (*Panthera onca*)](img/panthera_onca_miniatura.png){#fig-jaguar}\n\n![Puma (*Puma concolor*)](img/puma_concolor_miniatura.png){#fig-puma}\n\nFelinos más grandes de Costa Rica\n:::\n\n\n\n\n\n\n\n(a) Jaguar (Panthera onca)\n\n\n\n\n\n\n\n(b) Puma (Puma concolor)\n\n\n\n\nFigure 3.3: Felinos más grandes de Costa Rica\n\n\nEl atributo layout-ncol especifica el número de columnas.\n::: {#fig-felinos-costarica layout-ncol=2}\n\n![Jaguar (*Panthera onca*)](img/panthera_onca_miniatura.png){#fig-jaguar}\n\n![Puma (*Puma concolor*)](img/puma_concolor_miniatura.png){#fig-puma}\n\n![Manigordo (*Leopardus pardalis*)](img/leopardus_pardalis_miniatura.png){#fig-manigordo}\n\n![Yaguarondí (*Puma yagouaroundi*)](img/puma_yagouaroundi_miniatura.png){#fig-yaguarondi}\n\n![Caucel (*Leopardus wiedii*)](img/leopardus_wiedii_miniatura.png){#fig-caucel}\n\n![Tigrillo (*Leopardus tigrinus*)](img/leopardus_tigrinus_miniatura.png){#fig-tigrinus}\n\nTodos los felinos de Costa Rica\n:::\n\n\n\n\n\n\n\n(a) Jaguar (Panthera onca)\n\n\n\n\n\n\n\n(b) Puma (Puma concolor)\n\n\n\n\n\n\n\n(c) Manigordo (Leopardus pardalis)\n\n\n\n\n\n\n\n\n\n(d) Yaguarondí (Puma yagouaroundi)\n\n\n\n\n\n\n\n(e) Caucel (Leopardus wiedii)\n\n\n\n\n\n\n\n(f) Tigrillo (Leopardus tigrinus)\n\n\n\n\nFigure 3.4: Todos los felinos de Costa Rica\n\n\nPara más detalles sobre figuras, se recomienda consultar Quarto - Figures.\n\n\n\n3.6.2 Citas bibliográficas\nQuarto puede generar citas bibliográficas y bibliografías en un varios estilos. Para esto, es necesario:\n\nUn documento Quarto con citas (vea Citation Markdown).\nUna fuente de datos bibliográfica como, por ejemplo, un archivo BibLaTeX (.bib) o un archivo BibTeX (.bibtex).\nOpcionalmente, un archivo CSL (.csl) para formatear las citas y la bibiografía.\n\n\n3.6.2.1 Archivos bibliográficos\nEl archivo (o los archivos) bibliográficos que utiliza un documento, se especifican en la sección de YAML, mediante el campo bibliography. Por ejemplo:\n---\ntitle: \"Felinos\"\nbibliography: bibliografia/referencias.bib\n---\nEn Pandoc - Citations puede encontrar más información sobre los formatos bibliográficos. También puede ver aquí un ejemplo de archivo .bib.\n\n\n3.6.2.2 Sintaxis de las citas\nLas citas se especifican con el prefijo @. Por ejemplo:\nLa familia *Felidae* tiene 36 especies [@lamberski_felidae_2015].\nGenera la siguiente salida:\nLa familia Felidae tiene 36 especies (Lamberski, 2015).\nPara más información sobre las variaciones en la sintaxis de las citas, se recomienda consultar Citation Syntax.\n\n\n3.6.2.3 Estilo de las citas\nPor defecto, Quarto utiliza el Manual de estilo Chicago, pero puede usar cualquier estilo definido mediante Citation Style Language (CSL). El archivo CSL que se utiliza debe especificarse en la sección YAML con el campo csl.\n---\ntitle: \"Felinos\"\nbibliography: bibliografia/referencias.bib\ncsl: bibliografia/apa-6th-edition.csl\n---\nPueden encontrarse archivos CSL ya definidos en el repositorio central del Proyecto CSL o en el repositorio de estilos de Zotero.\nPara más información sobre los estilos de las citas, se recomienda consultar Citation Style.\n\n\n3.6.2.4 Generación de bibliografía\nLa lista de recursos citados se genera en una división con la identificación refs. Por ejemplo:\n### Referencias\n\n::: {#refs}\n:::\nSi no encuentra esta división en el documento, Quarto generará la bibliografía al final de este.\nPara más detalles sobre citas bibliográficas en Quarto, se recomienda consultar Quarto . Citations & Footnotes."
  },
  {
    "objectID": "03-quarto.html#ejemplo-de-documento-quarto",
    "href": "03-quarto.html#ejemplo-de-documento-quarto",
    "title": "3  Quarto",
    "section": "3.7 Ejemplo de documento Quarto",
    "text": "3.7 Ejemplo de documento Quarto\n\nSitio en GitHub Pages: https://mesa-monitoreo-puntos.github.io/felinos/\nCódigo fuente: https://github.com/mesa-monitoreo-puntos/felinos"
  },
  {
    "objectID": "03-quarto.html#ejercicios",
    "href": "03-quarto.html#ejercicios",
    "title": "3  Quarto",
    "section": "3.8 Ejercicios",
    "text": "3.8 Ejercicios\n\nDesarrolle en documento Quarto con un tema de su elección y publíquelo en GitHub Pages. Se recomienda seguir los siguientes pasos:\n\nCree un nuevo proyecto en RStudio.\nCree un documento Quarto con nombre index.qmd que incluya, al menos:\n\nTexto.\nVarios niveles de encabezados.\nEnlaces.\nFiguras y referencias a estas.\nCitas bibliográficas.\n\nGenere el archivo index.html.\nCree un nuevo repositorio en GitHub y suba los archivos index.qmd e index.html.\nPublique el repositorio como un sitio GitHub Pages."
  },
  {
    "objectID": "03-quarto.html#recursos-de-interés",
    "href": "03-quarto.html#recursos-de-interés",
    "title": "3  Quarto",
    "section": "3.9 Recursos de interés",
    "text": "3.9 Recursos de interés\n\nQuarto - Figures\nQuarto . Citations & Footnotes"
  },
  {
    "objectID": "03-quarto.html#referencias-1",
    "href": "03-quarto.html#referencias-1",
    "title": "3  Quarto",
    "section": "3.10 Referencias",
    "text": "3.10 Referencias"
  },
  {
    "objectID": "04-r.html",
    "href": "04-r.html",
    "title": "4  R",
    "section": "",
    "text": "R es un lenguaje de programación enfocado en análisis estadístico. En este capítulo, se explica la sintaxis básica del lenguaje y como bloques de código en R, y sus salidas, pueden ser incluídos en documentos Quarto."
  },
  {
    "objectID": "04-r.html#trabajo-previo",
    "href": "04-r.html#trabajo-previo",
    "title": "4  R",
    "section": "4.2 Trabajo previo",
    "text": "4.2 Trabajo previo\n\n4.2.1 Instalación de software\nPara la edición de código en R, se recomienda instalar:\n\nSistema base del lenguaje R\nRStudio Desktop (la versión v2022.07 y superiores son las cuales cuentan con los componentes necesarios para trabajar con Quarto)\n\nSi se va a trabajar con datos geoespaciales, es conveniente contar con un sistema de información geográfica de escritorio, como QGIS."
  },
  {
    "objectID": "04-r.html#el-lenguaje-de-programación-r",
    "href": "04-r.html#el-lenguaje-de-programación-r",
    "title": "4  R",
    "section": "4.3 El lenguaje de programación R",
    "text": "4.3 El lenguaje de programación R\nR es un lenguaje de programación enfocado en análisis estadístico. Es ampliamente utilizado en diversas áreas de investigación, entre las que pueden mencionarse ciencia de datos (data science), big data y aprendizaje automático (machine learning). Fue creado por Ross Ihaka y Robert Gentleman en la Universidad de Auckland, Nueva Zelanda, en 1993.\nR es un proyecto de software libre que se comparte mediante una licencia GNU General Public Licence (GNU GPL). Esta característica permite que la funcionalidad original de R pueda ser ampliada mediante bibliotecas o paquetes desarrollados por la comunidad de programadores.\nPara programar en R, puede utilizarse una interfaz de línea de comandos, editores de texto (ej. Visual Studio Code, Vim) y también ambientes de desarrollo integrados (IDE, integrated development environment) como Jupyter o RStudio.\n\n4.3.1 Tipos de datos y variables\nR puede trabajar con varios tipos de datos como números, textos y expresiones lógicas. También con datos agrupados en estructuras similares a tablas.\nEn la memoria de una computadora, los datos se almacenan en variables. Una variable puede considerarse como una etiqueta que se le asigna a un dato. Hay muchas formas de crear variables en R. Una de las más sencillas es con los operadores de asignación: =, <- y ->. Por ejemplo:\n\n# Creación de una variable numérica con valor inicial igual a 10\nx <- 10\n\n\n4.3.1.1 Tipos básicos\nLos tipos de datos básicos incluyen números, caracteres (i.e. textos), expresiones lógicas, vectores y matrices. Las siguientes sentencias crean variables de varios tipos de datos simples.\n\n# Números (pueden ser enteros o decimales)\nx <- 10\nx\n## [1] 10\n\n# Hileras de caracteres (se delimitan entre comillas simples o dobles)\nnombre <- 'Manuel'\nnombre\n## [1] \"Manuel\"\n\n# Lógicos (Verdadero o Falso, TRUE o FALSE)\np <- 1 > 2\np\n## [1] FALSE\n\n# Vectores (pueden contener elementos de cualquier tipo de datos)\ndias <- c('Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado')\ndias\n## [1] \"Domingo\"   \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"    \"Viernes\"  \n## [7] \"Sábado\"\n\n\n\n4.3.1.2 Tipos compuestos\nLos tipos de datos compuestos se utilizan para implementar conjuntos de datos, los cuales incluyen varios tipos de datos simples. Entre los tipos de datos compuestos, se encuentran los factores y los data frames.\n\n4.3.1.2.1 Data frames\nLos data frames son fundamentales para el análisis de datos en R. Son estructuras bidimensionales similares a tablas. Sus filas corresponden a las observaciones de un conjunto de datos y sus columnas a las variables. Los data frames implementan un conjunto de funciones similares a las de una hoja electrónica o una tabla de una base de datos relacional.\nLa distribución base de R incluye varios data frames de ejemplo.\n\n# Información sobre todos los conjuntos de datos incorporados en la distribución base de R\ndata()\n\n# Información sobre el cojunto de datos cars\n?cars\n# Despliegue de los datos de cars\nView(cars)\n\n# Información sobre el cojunto de datos mtcars\n?mtcars\n# Despliegue de los datos de mtcars\nView(mtcars)\n\n# Información sobre el cojunto de datos iris\n?iris\n# Despliegue de los datos de iris\nView(iris)\n\nR cuenta con una gran cantidad de funciones y operadores para manipular data frames. La notación [fila, columna] se utiliza para acceder a los elementos de un data frame.\n\n# Valor de la fila 1 y columna 1 del conjunto de datos iris\niris[1, 1]\n\n[1] 5.1\n\n# Fila 1 y columna 4\niris[1, 5]\n\n[1] setosa\nLevels: setosa versicolor virginica\n\n# Fila 2 (todas las columnas)\niris[1, ]\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n\n# Fila 2, columnas 3 y 4\niris[1, c(3, 4)]\n\n  Petal.Length Petal.Width\n1          1.4         0.2\n\n# Columna 1 (todas las filas)\niris[, 5]\n\n  [1] setosa     setosa     setosa     setosa     setosa     setosa    \n  [7] setosa     setosa     setosa     setosa     setosa     setosa    \n [13] setosa     setosa     setosa     setosa     setosa     setosa    \n [19] setosa     setosa     setosa     setosa     setosa     setosa    \n [25] setosa     setosa     setosa     setosa     setosa     setosa    \n [31] setosa     setosa     setosa     setosa     setosa     setosa    \n [37] setosa     setosa     setosa     setosa     setosa     setosa    \n [43] setosa     setosa     setosa     setosa     setosa     setosa    \n [49] setosa     setosa     versicolor versicolor versicolor versicolor\n [55] versicolor versicolor versicolor versicolor versicolor versicolor\n [61] versicolor versicolor versicolor versicolor versicolor versicolor\n [67] versicolor versicolor versicolor versicolor versicolor versicolor\n [73] versicolor versicolor versicolor versicolor versicolor versicolor\n [79] versicolor versicolor versicolor versicolor versicolor versicolor\n [85] versicolor versicolor versicolor versicolor versicolor versicolor\n [91] versicolor versicolor versicolor versicolor versicolor versicolor\n [97] versicolor versicolor versicolor versicolor virginica  virginica \n[103] virginica  virginica  virginica  virginica  virginica  virginica \n[109] virginica  virginica  virginica  virginica  virginica  virginica \n[115] virginica  virginica  virginica  virginica  virginica  virginica \n[121] virginica  virginica  virginica  virginica  virginica  virginica \n[127] virginica  virginica  virginica  virginica  virginica  virginica \n[133] virginica  virginica  virginica  virginica  virginica  virginica \n[139] virginica  virginica  virginica  virginica  virginica  virginica \n[145] virginica  virginica  virginica  virginica  virginica  virginica \nLevels: setosa versicolor virginica\n\n\nEl símbolo $ se emplea para referirse a una columna (i.e. variable) de un data frame, por su nombre (y no por su índice). También facilita algunas operaciones, como filtrado.\n\n# Columna Species\niris$Species\n\n  [1] setosa     setosa     setosa     setosa     setosa     setosa    \n  [7] setosa     setosa     setosa     setosa     setosa     setosa    \n [13] setosa     setosa     setosa     setosa     setosa     setosa    \n [19] setosa     setosa     setosa     setosa     setosa     setosa    \n [25] setosa     setosa     setosa     setosa     setosa     setosa    \n [31] setosa     setosa     setosa     setosa     setosa     setosa    \n [37] setosa     setosa     setosa     setosa     setosa     setosa    \n [43] setosa     setosa     setosa     setosa     setosa     setosa    \n [49] setosa     setosa     versicolor versicolor versicolor versicolor\n [55] versicolor versicolor versicolor versicolor versicolor versicolor\n [61] versicolor versicolor versicolor versicolor versicolor versicolor\n [67] versicolor versicolor versicolor versicolor versicolor versicolor\n [73] versicolor versicolor versicolor versicolor versicolor versicolor\n [79] versicolor versicolor versicolor versicolor versicolor versicolor\n [85] versicolor versicolor versicolor versicolor versicolor versicolor\n [91] versicolor versicolor versicolor versicolor versicolor versicolor\n [97] versicolor versicolor versicolor versicolor virginica  virginica \n[103] virginica  virginica  virginica  virginica  virginica  virginica \n[109] virginica  virginica  virginica  virginica  virginica  virginica \n[115] virginica  virginica  virginica  virginica  virginica  virginica \n[121] virginica  virginica  virginica  virginica  virginica  virginica \n[127] virginica  virginica  virginica  virginica  virginica  virginica \n[133] virginica  virginica  virginica  virginica  virginica  virginica \n[139] virginica  virginica  virginica  virginica  virginica  virginica \n[145] virginica  virginica  virginica  virginica  virginica  virginica \nLevels: setosa versicolor virginica\n\n# Creación de un subconjunto con las filas de la especie setosa\n# y con longitud del sépalo mayor o igual a 5.5\nsetosa <- iris[iris$Species == \"setosa\" & iris$Sepal.Length >= 5.5, ]\nsetosa\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n15          5.8         4.0          1.2         0.2  setosa\n16          5.7         4.4          1.5         0.4  setosa\n19          5.7         3.8          1.7         0.3  setosa\n34          5.5         4.2          1.4         0.2  setosa\n37          5.5         3.5          1.3         0.2  setosa\n\n\nLa función read.csv() permite leer datos de un archivo de valores separados por comas (CSV), el cual puede estar en una ubicación local o remota, y almacenarlos como un data frame.\n\n# Lectura de archivo CSV ubicado en la Web\nespecies_mamiferos_cr <-\n  read.csv(\n    \"https://raw.githubusercontent.com/mesa-monitoreo-puntos/capacitacion/main/datos/especies-mamiferos-cr.csv\"\n  )\n\n# Desplegue de los datos\nView(especies_mamiferos_cr)\n\nEjercicio\n- Descargue en su computadora el archivo https://raw.githubusercontent.com/mesa-monitoreo-puntos/capacitacion/main/datos/registros-mamiferos-cr.csv, cárguelo en un data frame y despliegue sus datos.\n\n\n\n\n4.3.2 Funciones\nR estructura un programa en unidades de código fuente llamadas funciones. Cada función realiza una tarea específica como, por ejemplo, un cálculo matemático y, por lo general, retorna un valor como salida. Todas las funciones tienen un nombre y, opcionalmente, un conjunto de argumentos que especifican los datos de entrada que procesa la función. Los argumentos se escriben entre paréntesis redondos (()) y estos siempre deben incluirse, aún en el caso de que la función no tenga ningún argumento. Si la función tiene varios argumentos, deben separarse mediante comas (,).\n\n# Impresión de una hilera de caracteres\nprint(\"Hola mundo\")\n\n[1] \"Hola mundo\"\n\n# Cálculo de la media aritmética\nmean(c(2, 4, 5, 9))\n\n[1] 5\n\n\n\n\n4.3.3 Paquetes\nLas funciones de R se distribuyen en paquetes. Cada paquete contiene un conjunto de funciones y estructuras de datos relacionadas entre sí. También hay paquetes que contienen datos (ej. gapminder).\nPara utilizar un paquete, primero debe cargarse (en la memoria del computador) con la función library().\n\n# Carga del paquete stats (para estadística)\nlibrary(stats)\n\nAlgunos paquetes están contenidos en la distribución base de R. Otros deben instalarse con la función install.packages().\nEn el siguiente bloque de código, se instala el paquete palmerpenguins.\n\n# Instalación del paquete palmerpenguins (note las comillas)\ninstall.packages(\"palmerpenguins\")\n\n# Carga del paquete palmerpenguins\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "04-r.html#tidyverse",
    "href": "04-r.html#tidyverse",
    "title": "4  R",
    "section": "4.4 Tidyverse",
    "text": "4.4 Tidyverse\n\n4.4.1 Descripción general\nTidyverse es una colección de paquetes de R enfocados en ciencia de datos, una discipina que permite convertir datos no procesados en entendimiento, comprensión y conocimiento.\nLa Figure 4.1 ilustra el modelo de un proyecto típico de ciencia de datos, el cual incluye los procesos de importar, organizar, transformar, visualizar, modelar y comunicar.\n\n\n\n\n\nFigure 4.1: Modelo de ciencia de datos. Imagen de Hadley Wickham.\n\n\n\n\n\n\n4.4.2 Paquetes\nLos paquetes de Tidyverse comparten filosofía de diseño, gramática y estructuras de datos para apoyar estos procesos del modelo de ciencia de datos. El núcleo de Tidyverse está compuesto por ocho paquetes base, los cuales proveen las funcionalidades utilizadas más frecuentemente en análisis de datos:\n\nggplot2: sistema para la creación declarativa de gráficos, basado en el libro The Grammar of Graphics, de Wilkinson et al..\ndplyr: gramática para la manipulación de datos que proporciona un conjunto consistente de “verbos” que resulven los retos más comunes de manipulación de datos.\ntidyr: conjunto de funciones para organizar (to tidy) datos, colocando las observaciones, variables y valores en filas, columnas y celdas de estructuras rectangulares.\nreadr: conjunto de funciones para cargar datos de estructuras rectangulares (ej. archivos CSV) en memoria.\npurr: conjunto de herramientas de programación funcional para trabajar con funciones y vectores.\ntibble: un tibble es una redefinición del concepto de data frame, para hacerlos más eficientes y fáciles de usar.\nstringr: colección de funciones para facilitar el trabajo con hileras de caracteres.\nforcats: colección de funciones para facilitar el trabajo con factores.\n\nHay otros paquetes para tareas más especifícas relacionadas con importación, limpieza y modelado de datos, entre otras. Los paquetes de Tidyverse son de los más descargados, entre la totalidad de paquetes del lenguaje de programación R.\n\n\n4.4.3 Instalación y carga\nLos paquetes de Tidyverse pueden instalarse de manera conjunta o individualmente con la función install.packages():\n\n# Instalación conjunta\ninstall.packages(\"tidyverse\")\n\n# Instalación de paquetes individuales\ninstall.packages(\"ggplot2\")\ninstall.packages(\"dplyr\")\n\nUna vez instalados, los paquetes también pueden cargarse conjunta o separadamente con la función library():\n\n# Carga conjunta\nlibrary(tidyverse)\n\n# Carga de paquetes individuales\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n\n4.4.4 Datos tidy\nLos paquetes de Tidyverse trabajan con datos tidy (i.e. ordenados, organizados), un concepto relacionado con la organización de los datos en estructuras rectangulares de filas y columnas, similares a las tablas o matrices.\nLos datos tidy deben cumplir con tres características:\n\nCada variable debe tener su propia columna.\nCada observación debe tener su propia fila.\nCada valor debe tener su propia celda.\n\nEstas características se ilustran en la Figure 4.2.\n\n\n\n\n\nFigure 4.2: Datos tidy. Imagen de Hadley Wickham.\n\n\n\n\nEl empleo de este modelo de datos es común en todos los paquetes de Tidyverse, lo que posibilita aprender y usar sus funciones con mayor facilidad. Además, permite invertir menos esfuerzo en lidiar con diferentes modelos de datos y así dedicar más tiempo y esfuerzo en los problemas de análisis a resolver.\n\n\n4.4.5 Pipes\nLas funciones de Tidyverse pueden encadenarse a través del operador pipe (tubo), ya sea el del paquete magrittr (%>%) o el del paquete base de R (|>). Los pipes se utilizan para conectar procesos y así construir pipelines (tuberías). En este contexto, un pipeline consiste de una cadena de procesos conectados de forma tal que la salida de cada proceso de la cadena es la entrada del próximo. Esto permite la comunicación y sincronización entre los procesos y evita la anidación (nesting) de llamados a funciones.\nEl siguiente ejemplo implementa un pipeline de dos funciones de Tidyverse:\n\n# Cadena de \"pipes\" entre funciones de Tidyverse\npenguins |>\n  dplyr::filter(species == \"Gentoo\") |> # subconjunto de observaciones\n  select(species, bill_length_mm, flipper_length_mm) # subconjunto de columnas"
  },
  {
    "objectID": "04-r.html#ejemplos-de-visualizaciones-de-datos",
    "href": "04-r.html#ejemplos-de-visualizaciones-de-datos",
    "title": "4  R",
    "section": "4.5 Ejemplos de visualizaciones de datos",
    "text": "4.5 Ejemplos de visualizaciones de datos\nSe presentan ejemplos de visualizaciones generadas con R en formato de tablas, gráficos y mapas.\nSe cargan los paquetes dplyr, para manipulación de datos, y palmerpenguins como conjunto de datos de ejemplo.\n\n# Carga de dplyr\nlibrary(dplyr)\n\n# Carga de palmerpenguins\nlibrary(palmerpenguins)\n\n\n4.5.1 El conjunto de datos palmerpenguins\npalmerpenguins es un paquete de datos de R ampliamente utilizado para ejemplificar funciones de exploración y visualización, como las de Tidyverse. Contiene 344 observaciones de pingüinos de tres especies, las cuales habitan en tres islas del archipiélago Palmer, en la Antártida. Para cada individuo se registraron variables como especie, sexo, masa (peso), longitud de la aleta (flipper), longitud del pico (bill) y profundidad del pico, entre otras.\npalmerpenguins puede instalarse con la función install.packages() y cargarse con la función library().\nEl paquete contiene dos conjuntos de datos:\n\npenguins_raw: datos sin procesar.\npenguins: subconjunto curado de los datos sin procesar.\n\npalmerpinguins se utiliza en este capítulo para ejemplificar varias de las funcionalidades de Tidyverse.\n\n\n4.5.2 Tablas\nHay varios paquetes de R para hacer tablas. Uno de estos es el paquete DT.\n\n# Instalación de DT\ninstall.packages(\"DT\")\n\n\n# Carga de DT\nlibrary(DT)\n\nLa siguiente tabla muestra algunas de las columnas del conjunto de datos palmerpenguins. Note el uso del operador pipe (|>) para pasar datos entre procesos.\n\npenguins |> # datos\n  select(species, sex, body_mass_g) |> # selección de columnas\n  arrange(species, sex, body_mass_g) |> # ordenamiento\n  datatable(\n    colnames = c(\"Especie\", \"Sexo\", \"Peso\"),\n    options = list(\n      pageLength = 5,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    ),\n    rownames= FALSE\n  )\n\n\n\n\n\n\nHay paquetes más elaborados para la generación de tablas en R (ej. gt).\nEjercicios\n- Con base en el bloque de código anterior, genere con DT una tabla que muestre la especie, la longitud del pico y la longitud de la aleta de cada pingüino, ordenada por longitud del pico. - Repita el ejercicio anterior, solo para los pingüinos machos. (Sugerencia: use la función filter() de dplyr).\n\n\n4.5.3 Gráficos\nggplot2 es un sistema para la creación declarativa de gráficos, creado por Hadley Wickham en 2005. Está basado en el libro The Grammar of Graphics, de Leland Wilkinson, un esquema general para visualización de datos que descompone un gráfico en sus principales componentes semáticos, tales como capas y geometrías.\nDe acuerdo con The Grammar of Graphics, los tres principales componentes de un gráfico son:\n\nDatos (observaciones y variables).\nConjunto de mapeos de las variables del conjunto de datos a propiedades visuales (aesthetics) del gráfico, tales como posición en el eje x, posición en el eje y, color, tamaño y forma, entre otras.\nAl menos una capa, la cual describe como graficar cada observación. Por lo general, las capas se crean con funciones de geometrías (ej. puntos, líneas, barras).\n\nSeguidamente, se ejemplifican varios tipos de gráficos estadísticos generados con la función ‘ggplot()’ del paquete ggplot2 de Tidyverse, para el conjunto de datos palmerpenguins.\n\n# Instalación de ggplot2\ninstall.packages(\"ggplot2\")\n\n\n# Carga de ggplot2\nlibrary(ggplot2)\n\n\n4.5.3.1 Gráficos de dispersión (scatter plots)\nEste tipo de gráficos muestra relaciones entre variables numéricas.\n\n# Gráfico de dispersión de longitud del pico vs masa (peso)\npenguins |> # datos\n  ggplot(aes(x = bill_length_mm, y = body_mass_g)) + # mapeo de variables estéticas\n  geom_point(size = 2) + # geometría\n  geom_smooth(method = \"lm\", se = FALSE) +\n  ggtitle(\"Longitud del pico vs. masa\") +\n  xlab(\"Longitud del pico (mm)\") +\n  ylab(\"Masa (g)\") +\n  labs(color = \"Especie\", shape = \"Especie\")\n\n\n\n\n\n# Gráfico de dispersión de longitud del pico vs masa (peso) por especie\npenguins |>\n  ggplot(aes(x = bill_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species,\n                 shape = species),\n             size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\", \"darkorchid\", \"cyan4\")) +\n  ggtitle(\"Longitud del pico vs. masa por especie\") +\n  xlab(\"Longitud del pico (mm)\") +\n  ylab(\"Masa (g)\") +\n  labs(color = \"Especie\", shape = \"Especie\")\n\n\n\n\nEjercicios\n- Genere un gráfico de dispersión que muestre la relación entre la longitud de la aleta y el peso de todos los pingüinos del conjunto de datos. - Repita el ejercicio anterior, pero agrúpelo por sexo.\n\n\n4.5.3.2 Histogramas\nEste tipo de gráficos muestra distribuciones de variables numéricas.\n\n# Distribución de la variable de masa (peso)\npenguins |>\n  ggplot(aes(x = body_mass_g)) +\n  geom_histogram() +\n  ggtitle(\"Distribución de la variable masa (peso)\") +\n  xlab(\"Masa (g)\") +\n  ylab(\"n\")\n\n\n\n\n\n# Distribución de la variable de masa (peso) por especie\npenguins |>\n  ggplot(aes(x = body_mass_g)) +\n  geom_histogram(aes(fill = species), alpha = 0.5, position = \"identity\") +\n  scale_fill_manual(values = c(\"darkorange\", \"darkorchid\", \"cyan4\")) +\n  ggtitle(\"Distribución de la variable masa (peso) por especie\") +\n  xlab(\"Masa (g)\") +\n  ylab(\"n\") +\n  labs(fill = \"Especie\")\n\n\n\n\nEjercicios\n- Genere un histograma que muestre la distribución de la longitud del pico para todos los pingüinos del conjunto de datos. - Repita el ejercicio anterior, pero agrúpelo por sexo.\n\n\n4.5.3.3 Diagramas de caja\nEste tipo de gráficos muestra información de una variable numérica a través de su mediana, sus cuartiles y sus valores atípicos.\n\n# Diagrama de caja de la variable masa (peso)\npenguins |>\n  ggplot(aes(y = body_mass_g)) +\n  geom_boxplot() +\n  ylab(\"Masa (g)\")\n\n\n\n\n\n# Diagrama de caja de la variable masa (peso) por especie\npenguins |>\n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_boxplot(aes(color = species), width = 0.3, show.legend = FALSE) +\n  scale_color_manual(values = c(\"darkorange\", \"purple\", \"cyan4\")) +\n  xlab(\"Especie\") +\n  ylab(\"Masa (g)\")\n\n\n\n\n\n\n\n4.5.4 Mapas\nHay varios paquetes de R para datos geoespaciales. Entre estos, están sf, para manejar datos vectoriales, y leaflet, para generar mapas para la Web.\n\n# Instalación de sf\ninstall.packages(\"sf\")\n\n# Instalación de leaflet\ninstall.packages(\"leaflet\")\n\n\n# Carga de sf\nlibrary(sf)\n\n# Carga de leaflet\nlibrary(leaflet)\n\nEl siguiente mapa muestra los registros de presencia en Costa Rica de la especie Puma concolor.\n\n# Lectura de un archivo CSV con registros de presencia\nregistros <-\n  st_read(\n    \"https://raw.githubusercontent.com/mesa-monitoreo-puntos/capacitacion/main/datos/registros-mamiferos-cr.csv\",\n    options = c(\n      \"X_POSSIBLE_NAMES=decimalLongitude\", # columna de longitud decimal\n      \"Y_POSSIBLE_NAMES=decimalLatitude\"   # columna de latitud decimal\n    ),\n    quiet = TRUE\n  )\n\n# Filtro por especie\nregistros <-\n  registros |>\n  filter(species == \"Puma concolor\")\n\n# Mapa\nleaflet() |>\n  setView(# centro y nivel inicial de acercamiento\n    lng = -84.19452,\n    lat = 9.572735,\n    zoom = 7) |>\n  addTiles(group = \"OpenStreetMap\") |> # capa base de OSM |>\n  addCircleMarkers(\n    # capa de registros de presencia (puntos)\n    data = registros,\n    stroke = F,\n    radius = 4,\n    fillColor = 'blue',\n    fillOpacity = 1,\n    group = \"Puma concolor\",\n    popup = paste(\n      paste0(\"<strong>Especie: </strong>\", registros$species),\n      paste0(\"<strong>Localidad: </strong>\", registros$locality),\n      paste0(\"<strong>Fuente: </strong>\", registros$institutionCode),\n      sep = '<br/>'\n    )\n  ) |>\n  addLayersControl(\n    baseGroups = c(\"OpenStreetMap\"),\n    overlayGroups = c(\"Puma concolor\")) |> # control de capas\n  addScaleBar(position = \"bottomleft\", options = scaleBarOptions(imperial = FALSE)) |> # barra de escala\n  addMiniMap(position = \"bottomleft\") # mapa de ubicación"
  },
  {
    "objectID": "04-r.html#integración-de-código-r-en-documentos-quarto",
    "href": "04-r.html#integración-de-código-r-en-documentos-quarto",
    "title": "4  R",
    "section": "4.6 Integración de código R en documentos Quarto",
    "text": "4.6 Integración de código R en documentos Quarto\nEn Quarto, los bloques (chunks) de código fuente se delimitan con tres backticks, tanto al inicio como al final del bloque. Los bloques en R se identifican con {r} y se configuran con diferentes opciones que inician con #|. Los bloques de otros lenguajes de programación se identifican con {python} y {julia}, por ejemplo.\nEl siguiente es un bloque de código en R y su salida.\n```{r}\n#| label: graficacion-cars\n#| include: true\n#| echo: true\n\nplot(\n  x = cars$speed,\n  y = cars$dist,\n  main = \"Velocidad vs distancia de frenado\",\n  xlab = \"Velocidad (mph)\",\n  ylab = \"Distancia (pies)\"\n)\n```\n\n\n\n\n\nLa opción label se utiliza para etiquetar el bloque. La de include para especificar si se desea que el bloque y sus resultados se incluyan en el documento de salida. Por su parte, echo indica si el código fuente debe desplegarse o no."
  },
  {
    "objectID": "04-r.html#ejercicios",
    "href": "04-r.html#ejercicios",
    "title": "4  R",
    "section": "4.7 Ejercicios",
    "text": "4.7 Ejercicios\n\nDesarrolle un documento Quarto con datos de una familia de mamíferos de Costa Rica. Incluya:\n\n\nUna tabla con registros de presencia.\nUn gráfico con cantidades de registros por especie.\nUn mapa de distribución.\n\n\nPublique el documento como un sitio en GitHub Pages."
  }
]